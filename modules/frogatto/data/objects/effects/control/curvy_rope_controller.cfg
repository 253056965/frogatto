{
id: "curvy_rope_controller",
next_animation: "'normal'",
always_active: true, //A hack until we figure out the proper active area.
zorder: "@include data/zorder.cfg:in_front_of_everything",
hidden_in_game: true,

editor_info: {
	category: "controllers",
	help: "A controller for making curvy ropes.",
	var: [{
		name: "resolution",
		type: "int",
		value: 10,
		min_value: 1,
		max_value: 40,
	},{
		name: "anchor points",
		type: "points",
		value: "[]",
	},{
		name: "desired_rope_type",
		type: "enum",
		value: "'normal'",
		enum_values: ["normal", "dark", "chain", "track", "tongue", "arrow ribbon"],
	}],
},

properties: {
	bcurve: "def(points, percent) lib.math.bezier_curve(points, percent/100.0)",
	set_points: "def(points) execute(self, [set(self['anchor points'], points), fire_event('editor_changed_variable')])",
	remove: "def() fire_event(self, 'editor_removed')",
},

vars: {
	my_created_objects: [],
	resolution: 10, //Defaults!
	desired_rope_type: 'normal',
},

on_create: "if(self['anchor points'], [
	map(range(0,resolution), 'point', [
		set(rope_ctrl.vars.index, ind),
		set(rope_ctrl.vars.resolution, resolution),
		set(rope_ctrl.vars.x_1, rope_ctrl.midpoint_x),
		set(rope_ctrl.vars.y_1, rope_ctrl.midpoint_y),
		set(rope_ctrl.vars.x_2, bcurve(self['anchor points'], ind+100.0/resolution+1)[0]),
		set(rope_ctrl.vars.y_2, bcurve(self['anchor points'], ind+100.0/resolution+1)[1]),
		set(rope_ctrl.animation, desired_rope_type),
		add(vars.my_created_objects, [rope_ctrl]),
		add_object(rope_ctrl),
	] where rope_ctrl = object('rope_angled_controller', bcurve(self['anchor points'], ind)[0], bcurve(self['anchor points'], ind)[1], 0) where ind = point * (100.0/resolution) ) where resolution = vars.resolution
])",

on_editor_changed_variable: "[
	set(my_created_objects, []),
	map(my_created_objects, remove_object(value)),
	fire_event('create'), //Don't recreate the sub-ropes unless we're actually in the level.
	set(resolution, lib.math.constrain(1, resolution, 40)),
]",

on_editor_removed: "map(my_created_objects, remove_object(value))",
			
on_end_anim: "animation('normal')",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 104,
	w: 28,
	h: 28,
	collide: [0,0,28,28],
	frames: 1,
	duration: 1000,
},
}