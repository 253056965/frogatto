{
id: "camera_controller",
next_animation: "'normal'",
always_active: true, //Hack until we figure out the appropriate bounding box.
hidden_in_game: true,

on_end_anim: "animation('normal')",
zorder: "@include data/zorders.cfg:in_front_of_everything",

editor_info: {     
	category: "controllers",
	help: "When triggered, this controller moves the camera through a preset path. Once it reaches its
destination, it fires the triggered event of the object with the ID given by next_id. For use with
scripting, please see the setup() and go() functions as defined in camera_controller.cfg.
Note: Passepartout only works with the game unpaused.",
	var: [{
		name: "passepartout",
		type: "enum",
		value: "'none'",
		enum_values: ["none", "standard", "iPhone", "iPad"],
	},{
		name: "preview route",
		type: "boolean",
		value: "false",
	},{
		name: "speed",
		type: "int",
		value: 10,
		min_value: 1,
		max_value: 100,
	},{
		name: "constant speed",
		type: "boolean",
		value: "false",
	},{
		name: "path",
		type: "points",
		value: "[]",
	},{
		name: "average path",
		type: "boolean",
		value: "false",
	},{
		name: "linked_object",
		type: "label",
	},],
},

properties: {
	new_preview_path: "[[decimal]] <- [tmp.starting_camera_position or lib.standardize.camera(level)] + self.path",

	do_rope_preview: "def() -> commands [
		set(last_preview_path, new_preview_path),
		set(last_preview_smooth, self['average path']),
		if(last_preview_path != new_preview_path or last_preview_smooth != self['average path'], [
			rope_controller.set_points(new_preview_path),
		]),
		if(last_preview_smooth != self['average path'], [
			if(preview_rope_controller, self.remove_rope_controller(preview_rope_controller)),
			self.add_rope_controller(rope_controller),
		]),
	] where rope_controller = if(last_preview_smooth = self['average path'] and preview_rope_controller, 
		preview_rope_controller, //Use the cached object if it's valid.
		if(self['average path'],
			object('curvy_rope_controller', 0,0,0, {desired_rope_type:'arrow ribbon'}), 
			object('${self.type}.not_curvy_rope_controller')) )",
	
	add_rope_controller: "def(object rope_ctrl) -> commands [
		add_object(rope_ctrl),
		set(preview_rope_controller, rope_ctrl),
		set(rope_ctrl.x, -10000), set(rope_ctrl.y, -10000), 
	]",
	
	remove_rope_controller: "def(object rope_ctrl) -> commands [
		remove_object(rope_ctrl),
		set(preview_rope_controller, null),
		rope_ctrl.remove(),
	]",
	
	draw_border: "def([decimal] cam, decimal screen_width, decimal screen_height) -> commands [
		debug_rect(cam[0]-screen_width/2, cam[1]-screen_height/2, screen_width, -100000),
		debug_rect(cam[0]-screen_width/2, cam[1]+screen_height/2, screen_width,  100000),
		debug_rect(cam[0]-screen_width/2, cam[1]-100000, -100000, 300000),
		debug_rect(cam[0]+screen_width/2, cam[1]-100000, 100000, 300000),
	]",
	
	position_along_path: "overload(
		def([[decimal]] path, decimal percentage) calc(path, percentage),
		def([[decimal]|map|object] path, decimal percentage) calc(lib.standardize.toPoints(path), percentage)
	) where calc = def(list path, decimal percentage) if(self['average path'],
		lib.math.bezier_curve(path, real_percentage(percentage)),
		lib.math.interpolate(path, real_percentage(percentage))
	) where real_percentage = def(percentage) if(self['constant speed'], percentage, lib.math.sin_in_out(percentage))",
	
	trigger_next_object: "def() [
		if(get_object(level, linked_object) and (not level.in_editor), fire_event(get_object(level, linked_object), 'button_pressed')), 
		if(linked_object_list, map(linked_object_list, 'obj', fire_event(get_object(level, obj), 'button_pressed'))),
		fire_event(self, 'finish'),
		map(tmp.callback, value()),
	]",
	
	//Setup: Takes a list of optionally mixed list [x,y]s, {mid_x:x, mid_y:y}s, or objects. These act as control points that the camera will move by. Level.camera_position is always the implicit first control point, and doesn't/can't be set here.
	set_path: "def([[decimal]|map|object] new_path) -> commands
		set(vars.path, lib.standardize.toPoints(new_path)) asserting size(path)",
		
	set_options: "def({string -> any} opt) -> commands [
		/*	key            | value
			-------------------------------
			passepartout   | If the object is to be used in the editor, should it preview the camera area?
			preview route  | If the object is to be used in the editor, should the preview move along the route?
			speed          | How fast the camera moves. This number is related to 'percentage along camera path'.
			constant speed | Set to 'yes' to stop the camera from picking up speed as it goes along. Good for tenser, jumpy cutscenes.
			path           | This value is just passed to set_path().
			average path   | Should the 'path' points be considered control points for a bezier curve? Note that all points are just averaged into one curve.
			linked object  | or linked_object. A string denoting the label of the object that should have the 'button_pressed' event fired when the camera reaches the end of the path.
			linked delay   | The number of frames to wait until firing the button_pressed event for the linked object and on_finish for ourself.
			callback       | Either a function or a list of functions to be called when the camera is done moving. Called before on_finish is fired.
		
		*///Set the vars from the editor.
		if('passepartout' in ok, set(self['passepartout'], newval asserting newval in ['none', 'standard', 'iPhone', 'iPad'] where newval = string <- opt['passepartout'])),
		if('preview route' in ok, set(self['preview route'], bool <- opt['preview route'])),
		if('speed' in ok, set(self['speed'], newval asserting newval>0 where newval = decimal <- opt['speed'])),
		if('constant speed' in ok, set(self['constant speed'], bool <- opt['constant speed'])),
		if(opt.path, set_path(opt.path)) asserting opt.path = null or size(opt.path),
		if('average path' in ok, set(self['average path'], bool <- opt['average path'])),
		if(opt.linked_object, set(self.linked_object, string <- opt.linked_object)) asserting opt.linked_object = null or size(opt.linked_object),
		
		//Set additional vars that might be useful.
		if(opt['linked object'], set(self['linked object'], string <- opt['linked object'])) asserting opt['linked object'] = null or size(opt['linked object']), //For consistency. Didn't want the linked_object to be the only var with an underscore... but at the same time, every other linked_object has an underscore.
		if('linked delay' in ok, set(self['linked delay'], decimal <- opt['linked delay'] asserting opt['linked delay'] >= 0)),
		if(opt.callback, if(is_list(opt.callback), add(tmp.callback, opt.callback), add(tmp.callback, [opt.callback] asserting is_function(opt.callback)))),
	] where ok = keys(opt)",
		
	go: "def(any|null callback) [
		fire_event(self, 'start_sequence'),
		if(callback, add(tmp.callback, [callback])),
	]",
	
	add: "def() add_object(self)",
	remove: "def() [ //Removes the camera controller cleanly, releasing any locks it's created.
		if(self.preview_rope_controller, self.remove_rope_controller(self.preview_rope_controller)),
		remove_object(self),
		set(level.lock_screen, null), 
	]",
},

vars: {
	preview_rope_controller: null,
	last_preview_path: null,
	last_preview_smooth: null,
	last_preview_route: null,
	linked_object_list: [],
	linked_delay: 1,
},

tmp: {
	travel_time: 0,
	starting_camera_position: null,
	callback: [],
},

on_editor_changed_variable: "[
	set(last_preview_route, self['preview route']),
	if(self['preview route'] and (not last_preview_route), fire_event('start_preview')),
]",

on_draw: "if(level.in_editor, [ //on_draw, as opposed to on_process, removes the double line effect but seems to only do so by not applying the rotation/scale to the object, producing hanging-down arrows. Oh well.
	switch(passepartout,
		'standard', draw_border(cam_pos, 800,600),
		'iPhone', draw_border(cam_pos, 480*2,320*2), //Double-res there.
		'iPad', draw_border(cam_pos, 1024,768),
		null) where cam_pos = position_along_path(new_preview_path, tmp.travel_time),
	do_rope_preview(),
	set(tmp.starting_camera_position, null),
], if(preview_rope_controller, remove_rope_controller(preview_rope_controller)) )",

on_triggered: "fire_event('start_sequence')",
on_button_pressed: "fire_event('start_sequence')",

on_start_sequence: "[
	set(tmp.travel_time, 0),
	set(tmp.starting_camera_position, lib.standardize.camera(level)),
	fire_event('go'),
]",
on_start_preview: "[
	set(tmp.travel_time, 0),
	fire_event('do_camera_preview'),
]",

on_do_camera_preview: "if(self['preview route'], [
	set(tmp.travel_time, tmp.travel_time + vars.speed/2000.0),
	if(tmp.travel_time > 1, set(tmp.travel_time, 0)),
	if(self['preview route'], schedule(1+(tmp.travel_time>1)*19, fire_event('do_camera_preview'))),
])",

on_go: "[
	set(tmp.travel_time, tmp.travel_time + vars.speed/2000.0),
	if(not tmp.travel_time > 1, 
		schedule(1, fire_event('go')), 
		schedule(linked_delay, trigger_next_object()) ),
	set(level.lock_screen, cam_pos),
	//debug('cycle ' + cycle + ' set cam to ' + cam_pos[0] + ' x ' + cam_pos[1]),
	set(level.camera_position, [(cam_pos[0]-level.camera_position[2]/2)*100, (cam_pos[1]-level.camera_position[3]/2)*100]), 
] where cam_pos = position_along_path(new_preview_path, tmp.travel_time)",

on_finish: "/*Your code here!*/", //Fired when the camera has reached its final resting place.

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 228,
	w: 28,
	h: 28,
	collide: [0,0,28,28],
	frames: 1,
	duration: 1000,
},

object_type: { //This implements, minimally, the curvy_rope_controller but just draws ropes between the lines instead of curving them.
	id: "not_curvy_rope_controller",
	next_animation: "'normal'",
	always_active: false,
	hidden_in_game: true,
	zorder: "@include data/zorders.cfg:in_front_of_everything",
	
	properties: {
		set_points: "def(points) [
			set(ropes, new_ropes),
			map(ropes, remove_object(value)),
			map(new_ropes, [
				add_object(value),
				set(value.always_active, true),
				set(value.animation, desired_rope_type),
			]),
		] where new_ropes = 
			map(
				map(
					range(size(points)-1), 
					'point_index', 
					[points[point_index], points[point_index+1]]),
				point,
			object('rope_angled_controller', 0, 0, 0, {x_1:point[0][0], y_1:point[0][1], x_2:point[1][0], y_2:point[1][1]}))",
		remove: "def() map(ropes, remove_object(value))",
	},
	
	vars: {
		ropes: [],
		desired_rope_type: 'arrow ribbon',
	},
	
	on_end_anim: "animation('normal')",

	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 179,
		y: 104,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
},

}