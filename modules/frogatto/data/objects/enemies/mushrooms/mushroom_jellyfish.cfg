{
id: "mushroom_jellyfish",

friction: 4000,
always_active: true,
prototype: ["ant_flying"],
properties: {
	altitude_adjustment: "(wave(cycle*5+1000)/50)",
	should_dive: "if(	
						level.player.y > y + 50 and level.player.y < vars.dive_height and
						level.player.midpoint_x > vars.x_bound and
						level.player.midpoint_x < vars.x2_bound, 1, 0)",

	should_climb: "if(midpoint_y > vars.dive_height or midpoint_y < vars.desired_height-20 or midpoint_x > vars.x2_bound or midpoint_x < vars.x_bound, 1, 0)",

	begin_dive: "def() [
								if(level.player.midpoint_x > midpoint_x, facing(1), facing(-1)),
								set(vars.behavior, 'dive'),
								set(vars.target_x, level.player.midpoint_x),
								set(vars.target_y, level.player.y),
								add(velocity_y,200)]",
	begin_climb: "def() [	set(vars.behavior, 'climb')]",
	process_dive: "def() [	if(level.player.midpoint_y > midpoint_y, add(velocity_y, 8),add(velocity_y,-8) ),
								if(level.player.midpoint_x > midpoint_x, [try_facing(1),add(velocity_x, 12)],[try_facing(-1),add(velocity_x,-12)] ),
							   	if(should_climb, begin_climb() )]",
	process_climb: "def() [	if(midpoint_x < init_x, [try_facing(1),add(velocity_x, 5)],[try_facing(-1),add(velocity_x,-5)] ),
								if(midpoint_y < init_y, add(velocity_y, 8),add(velocity_y,-8) )
									]",
	process_hover: "def() [	if(midpoint_x < init_x, [try_facing(1),add(velocity_x, 5)],[try_facing(-1),add(velocity_x,-5)] ),
								if(midpoint_y < init_y, add(velocity_y, 8),add(velocity_y,-8) ),
								if(should_dive, begin_dive())
									]",
	try_facing: "def(direction) if(direction != facing,fire_event('turn'))",

	death_fx_type: "'animal'",
	acquirable_item_drop_value: 10,					
	points_value: 14,
	
	central_process: "def() [switch(vars.behavior,
							'', process_climb(),
							'hover', process_hover(),
							'dive', process_dive(),
							'climb', process_climb(),
							'regular', [proto_event('ant_flying', 'process_fly'), if(should_dive, begin_dive())]),
							set(rotate, sin(cycle*7) * 10.0)]",

},
consts: {
	basic_type: "bat_red",
	thrown_type: "bat_red.thrown",
	basic_animation: "fly",
	frogourmet_tag: "bat_red",
},
on_create: "[	set(vars.behavior,'hover'),
						animation('fly'),
						set(vars.init_y, midpoint_y),
						set(vars.init_x, midpoint_x)
					]",
on_end_anim: "animation('fly')",


on_turn: "if(cycle-vars.last_turned > 30,[set(vars.last_turned,cycle),set(facing, -facing)])", #symmetric creature, so overrule the usual turn behavior because we have no turn anim

on_process_fly: "central_process()",
on_process_turn: "fire_event('process_fly')",
on_lose_wings: "#don't lose wings#",

on_wingflap: "[proto_event('ant_flying','wingflap'),add(velocity_y,-50)]",


#solid_area=5,10,20,25
solid_area: null,
editor_info: {
	category: "enemies, forest",
	var: [
		{
			name: "x_bound",
			type: "x",
			value: "x - 200",
		},
		{
			name: "x2_bound",
			type: "x",
			value: "x2 + 200",
		},
		{
			name: "desired_height",
			type: "y",
			value: "midpoint_y",
		},
		{
			name: "dive_height",
			type: "y",
			value: "midpoint_y+300",
		},
	],
},
animation: [
	{
		"@base": true,
		image: "enemies/mushroom-jellyfish.png",
		body_area: "all",
		accel_y: 0,
		feet_x: 14,
		feet_y: 25,
		pad: 2,
	},
	{
		id: "fly",
		rect: [1,1,27,34],
		frames: 12,
		frames_per_row: 6,
		duration: 4,
		accel_x: 0,
		events: "8:wingflap",
		attack_area: [4,18,24,28],
	},
	{
		id: "spring",
		rect: [1,32,26,70],
		frames: 1,
		duration: 3,
	},
	{
		id: "turn",
		rect: [1,74,26,112],
		frames: 2,
		duration: 3,
		attack_area: [4,18,24,28],
	},
	{
		id: "hurt",
		rect: [120,32,145,70],
		frames: 1,
		duration: 18,
	},
],
object_type: {
	id: "thrown",
	prototype: ["throwable_small_enemy"],
	solid_dimensions: ["enemy","common"],
	consts: {
		basic_type: "bat_red",
		thrown_type: "bat_red.thrown",
		basic_animation: "fly",
		frogourmet_tag: "bat_red",
	},
	properties: {
		acquirable_item_drop_value: 10,					
		points_value: 14,
	},

	#specifically trigger death here because non-solid objects don't have a water-level
	on_enter_water: "[handle_death(null),die()]",
	on_die: "if(me.underwater, null, proto_event('throwable_small_enemy', 'die'))",
	animation: [
		{
			image: "enemies/bat-red.png",
			id: "thrown",
			thrown_area: "all",
			duration: 60,
			rect: [149,32,174,70],
			frames: 1,
			body_area: null,
		},
		{
			image: "enemies/bat-red.png",
			id: "on_back",
			rect: [149,32,174,70],
			frames: 2,
			duration: 5,
			body_area: "all",
		},
	],
},
}
