{
id: "ant_flying",
prototype: ["movable_enemy"],

traction_in_air: 1000,
has_feet: false,
activation_border: 150,

properties: {
	attack_damage: "if(higher_difficulty, 2, 1)",
	team: "'evil'",
	handle_special_damage_response: "def(collide_with) fire_event('lose_wings')",
	acquirable_item_drop_value: 10,					
	death_fx_type: "'bug'",
	points_value: 75,


	//designed to be overridden in derived objects
	fly_height_adjustment: 0,
	target_height: "def() vars.desired_height",
	
	default_anim: "'fly'",
	wingless_anim: "'stand'",
	bounce_roundness: 10,
},
vars: {
	turns_at_cliffs: 1,
},

on_swallowed: "fire_event('lose_wings')",
on_create: "[animation(default_anim), if(vars.desired_height = null, set(vars.desired_height, midpoint_y)), set(activation_border, abs(vars.x_bound - vars.x2_bound))]",

#-------------------------- collision handling --------------------------#
on_collide_side: "[if(not (animation in ['hurt']), turn_around()),set(velocity_x, -velocity_x/2)]",
on_collide_head: "set(velocity_y, -velocity_y/2)",
on_collide_feet: "set(velocity_y, -velocity_y/2)",

on_bounced_on: "fire_event('lose_wings')",
on_lose_wings: "[set(type, basic_type),animation(wingless_anim), map(range(1+1d3),spawn('broken_wing_shard',me.mid_x,me.mid_y,me.facing)),impact_cloud(mid_x,y,'large'), sound('ant-dewinged'+1d3+'.wav')]",

#-------------------------- animation switching --------------------------#
on_end_anim: "animation('fly')",

on_test_bounds: "[if(not animation in ['turn'],if(facing < 0 and x < vars.x_bound or
	                facing > 0 and x2 > vars.x2_bound,
					turn_around()))]",
on_process_fly: "[if(solid(level, front + facing*100, y, 1, y2 - y),
	            turn_around()),fire_event('test_bounds'),
	            set(velocity_y, wave( min(250,max(-250, destination_height-midpoint_y ) ) ))
	            ] where destination_height = target_height() + altitude_adjustment",
	         
on_wingflap: "sound_falloff('wingflap'+1d5+'.wav', 220,1.0)",

editor_info: {
	category: "enemies, general",
	var: [
		{
			name: "x_bound",
			type: "x",
			value: "x - 200",
		},
		{
			name: "x2_bound",
			type: "x",
			value: "x2 + 200",
		},
		{
			name: "desired_height",
			type: "y",
			value: "midpoint_y",
		},
	],
},
}
