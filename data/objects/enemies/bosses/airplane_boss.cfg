{
id: "airplane_boss",
prototype: ["hittable"],
always_active: true,
hitpoints: 2401,   #400 * 6 + 1
zorder: "@include data/zorder.cfg:player",


mass: 5,
ignore_collide: true,
traction_in_air: 1000,
properties: {
	team: "'evil'",
	boss_hitpoints: "hitpoints-1",
	boss_max_hitpoints: "max_hitpoints-1",
	armor: "standard_thrown_damage - 1",
	flinch_threshold: 9999999,
	alive: "(not _has_died)",
	points_value: "2000",

	vary_smoke_density: "set(particle_systems['smoke'].spawn_rate, abs(3000*(sin(cycle*8.0)+1) ))",
	change_height: "[set(y, _heights[_heights_index%size(_heights)]), set(_heights_index, _heights_index+1)]",
	
#--------------------------  vars --------------------------#
	_left_bound: { type: "decimal", init: "400-level.camera_position[2]/2-300", persistent: false },
	_right_bound: { type: "decimal", init: "400+level.camera_position[2]/2+300", persistent: false },
	_left_bound_missile: { type: "decimal", init: "400-level.camera_position[2]/2-100", persistent: false },
	_right_bound_missile: { type: "decimal", init: "400+level.camera_position[2]/2+100", persistent: false },
	_strafing: { type: "int", init: "-1", persistent: false  },

	_pilot: { type: "obj kitty_pilot", init: "object('kitty_pilot', x, y, {facing: facing, zorder: zorder-1})", persistent: false  },
	_propeller: { type: "obj airplane_boss.propeller", init: "object('airplane_boss.propeller', x, mid_y - 50, {facing: facing, zorder: zorder+1})", persistent: false  },
	_heights: "[-20,00,20,370]",
	_heights_index: { type: "int", init: "0", persistent: false },
	
	_has_died: { type: "bool", default: false, persistent: false },
},

on_create: "[if(lower_difficulty, set(max_hitpoints, 1201)), animation('fly'),sound_loop('loops/PlaneFlyBy.ogg'),add_particles('smoke'),
				add_object(_pilot), set(_pilot.parent, me),
				add_object(_propeller), set(_propeller.parent, me),
				set(_propeller.relative_x, -64),
				
				map(level.gui, set(gui_vars.bosses, current_bosses + [me]) where current_bosses = [object] <- gui_vars.bosses where gui_vars = object <- value.vars)
				]",
on_end_anim: "animation('fly')",
on_flag_death: "if(not _has_died,[set(_has_died, true)])",

on_process: "[vary_smoke_density,
				set(velocity_y, 50* sin(cycle*8.0)),
				if(hitpoints <= 1, fire_event('flag_death') ),

	         if((not alive) and (cycle%10 =1),
	             [spawn('explosion_big',  mid_x + 1d50 - 1d50, mid_y + 1d70 - 1d70, -facing),sound('BombExplode.wav')]),
	
	               if((facing < 0 and x < _left_bound or facing > 0 and x > _right_bound),
	               [set(_strafing, -1), facing(-facing), set(_pilot.facing, -facing), set(_propeller.facing, -facing), animation('fly'), set(velocity_x, 0),
	               change_height,
	               if(not alive, die() /*note that this full removal will only happen when offscreen*/)  ])]",
timer_frequency: 20,
on_timer: "[
	     if(hitpoints > 1 and x > _left_bound_missile and x2 < _right_bound_missile and cycle > 200,
	          if(_strafing > 0, [set(_strafing, _strafing - 1),
				if(1d2=2,
					spawn('${type}.dud_bomb', mid_x, mid_y+40, facing, [set(child.velocity_x, velocity_x)]),
					spawn('${type}.bomb', mid_x, mid_y+40, facing, [set(child.velocity_x, velocity_x)]))
                ,sound('MissileDrop.wav')],
				if(_strafing = -1 and (level.player.mid_x - mid_x)*facing < (200 + (level.player.y - y)), [set(_strafing, 8)])))
				]",
animation: [
	{
		"@base": true,
		image: "vehicles/plane-milgram.png",
		pad: 3,
		body_area: "all",
		id: "fly",
		rect: [1,1,69,69],
		frames: 5,
		duration: 3,
		reverse: true,
		accel_x: 8,
	},
	{
		duration: 8,
	},
	{
		duration: 7,
	},
	{
		duration: 6,
	},
	{
		duration: 5,
	},
],
particle_system: {
	id: "smoke",
	type: "simple",
	spawn_rate: 100,
	time_to_live: 100,
	min_x: -30,
	max_x: -20,
	min_y: 60,
	max_y: 80,
	velocity_y: -300,
	velocity_x: 260,
	velocity_x_random: 800,
	velocity_y_random: 600,

	#color=255,255,255,255
	delta_a: 15,
	animation: {
		id: "sparkle",
		image: "effects/explosion.png",
		x: 198,
		y: 5,
		w: 17,
		h: 16,
		pad: 3,
		frames: 8,
		frames_per_row: 2,
		scale: 2,
		duration: 6,
	},
},
object_type: [
	{
		id: "propeller",
		prototype: ["hittable"],
		properties: {
			attack_damage: "if(higher_difficulty, 4,1)",
		},
		
		always_active: true,
		on_end_anim: "set(animation, 'normal')",
		animation: [
			{
				id: "normal",
				image: "vehicles/plane-milgram.png",
				rect: [1,73,28,116],
				pad: 3,
				frames: 4,
				duration: 1,
				attack_area: "all"
			},
		]
	},
	{
		id: "bomb",
		prototype: ["throwable_projectile"],
		always_active: true,
		dies_on_inactive: true,
		solid_area: [15,15,20,22],
		solid_dimensions: ["enemy","common"],

		properties: {
			attack_damage: "if(higher_difficulty, 2,1)",
			damage_cooldown: 5,
			team: "'evil'",
			left_bound: "480 - screen_w/2 where screen_w = level.camera_position[2]",
			right_bound: "480 + screen_w/2 where screen_w = level.camera_position[2]",
			
			cease_motion: "[set(velocity_x,0),set(velocity_y,0)]",
			test_collision:  "def(custom_obj|null collide_with, string event_name) -> commands if(collide_with is obj hittable, if(collide_with.team != team, proto_event('throwable_projectile', event_name)))",
		},
		on_create: "[if(time_spat, animation('thrown'),animation('spawn')),add_particles('fuse_sparks')]",
		on_end_spawn_anim: "animation('thrown')",

		on_die: "[spawn('explosion_big',mid_x,mid_y,facing),sound('BombExplode.wav'),spawn('explosion_spark_bright',mid_x,mid_y,facing)]",

		on_process: "[if((mid_x < left_bound + 20) or (mid_x > right_bound -20),remove_object(me))]",
		on_collide_object_thrown: "test_collision(arg.collide_with, 'collide_object_thrown')",
		on_collide_head: "fire_event('die')",
		on_collide_feet: "test_collision(arg.collide_with, 'collide_feet')",
		
		animation: [
			{
				"@base": true,
				image: "effects/bomb.png",
				pad: 3,
				accel_y: 80,
				frames: 1,
				body_area: [15,10,30,25,"solid"]
			},
			{
				id: "thrown",
				rect: [57,2,81,29],
				body_area: null,
				thrown_area: "all",
				duration: 10,
			},
			{
				id: "spawn",
				rect: [1,2,25,29],
				frames: 3,
				duration: 6,
				thrown_area: "all",
			},
			{
				id: "on_back",
				rect: [57,2,81,29],
				body_area: "all",
				frames: 1,
				duration: 2,
			},
		],
		particle_system: {
			id: "fuse_sparks",
			type: "simple",
			spawn_rate: 1500,
			time_to_live: 6,
			min_x: 0,
			max_x: 10,
			min_y: 4,
			max_y: 14,
			velocity_y: -500,
			velocity_x: -500,
			velocity_x_random: 1000,
			velocity_y_random: 1000,
			animation: {
				id: "sparkle",
				image: "effects/particles2.png",
				rect: [6,30,12,36],
				frames: 3,
				duration: 2,
				pad: 4,
			},
		},
	},
	{
		id: "dud_bomb",
		prototype: ["throwable_projectile"],
		always_active: true,
		dies_on_inactive: true,
		solid_area: [15,15,20,22],
		solid_dimensions: ["enemy"/*"common"*/],

		properties: {
			attack_damage: "standard_thrown_damage",
			attack_damage_to_player: "if(higher_difficulty, 2,1)",
			left_bound: "480 - screen_w/2 where screen_w = level.camera_position[2]",
			right_bound: "480 + screen_w/2 where screen_w = level.camera_position[2]",
			play_bounce_sound: "if(abs(velocity_y) > 180, sound('metal-clunk'+1d5+'.wav'))",
			
			dampen_motion: "def(int pol_x, int pol_y) -> commands [set(velocity_x, if(abs(velocity_x) < 70, 0, velocity_x*0.5 * pol_x)), set(velocity_y, if(abs(velocity_y) < 70, 0, velocity_y*0.5 * pol_y)), play_bounce_sound]",
			test_collision:  "def(custom_obj|null collide_with, string event_name, int pol_x, int pol_y) -> commands if(collide_with is obj hittable, if(collide_with.team = 'neutral', [set(animation, 'on_back'),dampen_motion(pol_x,pol_y)], proto_event('throwable_projectile', event_name)))",
		},
		on_create: "if(time_spat, animation('thrown'),animation('spawn'))",
		on_end_spawn_anim: "animation('thrown')",

		on_die: "spawn('explosion_spark_bright',mid_x,mid_y,facing)",
		on_explode: "[spawn('explosion_big',mid_x,mid_y,facing),sound('BombExplode.wav'),die()]",

		on_process: "[if((mid_x < left_bound + 20) or (mid_x > right_bound -20),remove_object(me))]",
		on_collide_object_thrown: "test_collision(arg.collide_with, 'collide_object_thrown', -1, -1)",
		on_collide_feet: "test_collision(arg.collide_with, 'collide_feet', 1, -1)",
		on_collide_side: "test_collision(arg.collide_with, 'collide_side', -1, 1)",
		
		animation: [
			{
				"@base": true,
				image: "effects/bomb.png",
				pad: 3,
				accel_y: 80,
				frames: 1,
				body_area: [15,10,30,25,"solid"]
			},
			{
				id: "thrown",
				rect: [57,2,81,29],
				body_area: null,
				thrown_area: "all",
				duration: 10,
			},
			{
				id: "spawn",
				rect: [1,2,25,29],
				frames: 3,
				duration: 6,
				thrown_area: "all",
			},
			{
				id: "on_back",
				rect: [57,2,81,29],
				body_area: "all",
				frames: 1,
				duration: 2,
			},
		],
	},
],
}
