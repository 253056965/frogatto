{
id: "kitty_sniper_foreground",
prototype: ["stationary_vulnerable"],
solid_area: [16,10,36,33],
is_strict: true,

editor_info: {
	"@derive": "@include data/object_prototypes/enemies/kitty.cfg:editor_info",
},

properties: {	
	gunsight_distance_from_source: 20,
	gunsight_source: "Point <- me.midpoint_xy", //TODO: Factor in distance to rifle barrel here?
	target: "level.player",
	granularity: 5,
	steps_to_fire: "decimal <- abs(max(gunsight_source[0]-fire_overshoot_target[0], gunsight_source[1]-fire_overshoot_target[1]))/granularity",
	fire_overshoot_target: "Point <- orbit(target.mid_x, target.mid_y, lib.math.angle(me, target), lib.math.length(me, target)+(int <- max(level.camera_position[2:]))/2/2)", //Half resolution, half width of screen.
	steps_to_frogatto: "int <- abs(max(gunsight_source[0]-target.mid_x, gunsight_source[1]-target.mid_y))/granularity",
	
	//Return a list of points on the line of sight between the sniper kitty and frogatto.
	//This is slooooow.
	line_of_sight: "[Point] <- map(range(steps_to_fire+1), 'step', 
		lib.math.interpolate(gunsight_source, step/1.0/steps_to_fire, fire_overshoot_target))",
	//This is no faster.
	xline_of_sight: "[Point] <- [lib.math.interpolate(gunsight_source, step/1.0/steps_to_fire, fire_overshoot_target) 
		| step <- range(steps_to_fire+1)]",
		
	steps_to_collision: "def([Point] steps, int index=0) -> int //This doesn't work, returning merely a bunch of strings - a list of valid functions?
		base index = size(steps): index-1 //No collisions.
		base solid(level, int(steps[index][0]), int(steps[index][1])): index //Level collision.
		base find(filter(level.active_chars, value not in [me, me.target]), 'char', 
			dump([index, size(steps)], index < size(steps)) and
			lib.math.in_range(char.x, steps[index][0], char.x+char.img_w) and
			lib.math.in_range(char.y, steps[index][1], char.x+char.img_h)): index
		recursive: steps_to_collision(steps, index+1)",
		
	sniper_ray: { //Constant; a reference to the object for drawing the ray.
		type: "obj rope_angled_controller", 
		init: "object('rope_angled_controller', me.x, me.y, {animation: 'tongue'})",
	},
},

on_create: "[add_object(sniper_ray), map(line_of_sight, spawn('target', value[0], value[1], {scale: 0.5}))]",

on_process: "[
	sniper_ray.set_ends(gunsight_source[0], gunsight_source[1], line_of_sight[steps][0], line_of_sight[steps][1]),
	set(sniper_ray.alpha, if(steps <= steps_to_frogatto, 127, 255)),
] where steps = steps_to_collision(line_of_sight)",

xon_process: "debug(size(line_of_sight))",

//Fires *after* frogatto's death animation is complete.
//on_player_death: "debug('victory! yes!')",

animation: [
	{
		id: "attract", //Look sniper-y for the editor. The default pose, facing straight-down, is hard to recognise out of context.
		image: "enemies/kitty-sniper.png",
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		rotate_on_slope: true,
		body_area: [23,14,23,25],
		no_remove_alpha_borders: true,
		rect: [285,1,"@eval 285+68",69],
		frames: 1,
		duration: 99999999, //3.3 weeks
	},{
		id: "snipe", //One frame for each of the drawn 180Â° rotations.
		image: "enemies/kitty-sniper.png",
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		rotate_on_slope: true,
		body_area: [23,14,23,25],
		no_remove_alpha_borders: true,
		rect: [1,1,68,71],
		frames: 9,
		duration: 1,
	},
],

object_type: [{
	id: "smoke_trail",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	animation: {
		id: "disperse",
		image: "enemies/kitty-sniper-bullet.png",
		rect: [1,0,10,9],
		frames: 4,
		pad: 3,
		duration: 4,
	},
},{
	id: "target",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	on_create: "blur(128, 128, 1)",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 23,
		y: 197,
		w: 28,
		h: 28,
	},
}],
	
}