{
id: "inventory_screen_controller_2",
ignore_collide: true,
zorder: "@include data/zorder.cfg:ovelaid_gui_dialog_underlay",
is_human: true,
hidden_in_game: false,
use_absolute_screen_coordinates: true,
blend_mode_source: "zero",
blend_mode_dest: "dst_color",
is_strict: true,

types: {
	Vector: "Point",
	
	//UiNodes is a poor man's recursive data structure.
	//Use a UiNode when need to recurse, since UiNode matches at any depth.
	NeedsFurtherRecursion: "null", //If we hit max defined depth we will see this type when we start getting errors. Hopefully, this makes it easy to trace the error down.
	UiNodes: "{ 
		offset: function() -> Vector,
		widget: null, //Slightly specialised, since we know what widgets we'll be hitting at what depth. :)
		children: [{
			offset: function() -> Vector,
			widget: widget,
			children: [{
				offset: function() -> Vector,
				widget: widget|custom_obj,
				children: [{
					offset: function() -> Vector,
					widget: widget|custom_obj,
					children: [{
						offset: function() -> Vector,
						widget: widget|custom_obj,
						children: NeedsFurtherRecursion, //Add more children here if needed.
					}],
				}],
			}],
		}],
	}",
	UiNode: "{ //Any single 'node', including base. Used for recursion. See reposition_ui() for example.
		offset: function() -> Vector,
		widget: null|widget|custom_obj,
		children: any, //Children will always have to be dynamically cast to UiNode.
		               //We wind up measuring depth, otherwise.
	}",
},

properties: {
	inventory_gui_elements: { type: "[custom_obj]", default: [] },
	
	player: "obj frogatto_playable <- level.player",
	
	
	
	ui: {
		type: "UiNodes",
		init: "{
			offset: def() [0,0], //This is essentially a variable to track our current position. It is set dynamically.
			widget: null,
			children: ([{
				offset: def() [screen_center[0] - panel_size[0], screen_center[1] - panel_size[1]], //This vector is added to the offset.
				widget: widget(me, {
					type: 'image', 
					image: 'gui/pause-menu/panel-background.png', 
					area: [0,0,panel_size[0],panel_size[1]], 
					x: 0, y: 0,
				}),
				children: [
					
				],
			},{
				offset: def() [screen_center[0] - panel_size[0] + panel_separation, screen_center[1] - panel_size[1]],
				widget: widget(me, {
					type: 'image', 
					image: 'gui/pause-menu/panel-background.png', 
					area: [0,0,panel_size[0],panel_size[1]], 
					x: 0, y: 0,
				}),
				children: [],
			},
			] where panel_size = [256,256],
				panel_separation = 600, //px, note that this value is repeated in the anim code as slide distance.
				screen_center = [int, int] <- [v/2 | v<-level.camera_position[2:4]]
			),
		}",
	},	
	
	
	
	//Recursively recalculate the positions for the UI, to take into account scrolling and such.
	reposition_ui: "def(null|function() -> Point newOffset=null) -> commands [
		commands <- newOffset and set(ui.offset, function() -> Point <- newOffset), //Only update the offset if supplied.
		(_reposition_ui_children(posFn(), ui) where posFn = function() -> Point <- (newOffset or ui.offset))
	]",
	_reposition_ui_children: "def(Vector newOffset, UiNode nodes) -> [commands]
		map([UiNode]<-nodes.children, 'node', (
			if(node.widget, [set(node.widget.x, nodeOffset[0]), set(node.widget.y, nodeOffset[1])], [])
			+ _reposition_ui_children(nodeOffset, node)
		) where nodeOffset = zip(newOffset, node.offset())
	)",
	
	
	
	slide_duration: "100", //Config: How long do we take to tween between the inventory and map panes?
	slide_start_cycle: {default: 1},
	slide: "def() -> decimal lib.math.constrain(0, (cycle-slide_start_cycle)/1.0/slide_duration, 1)",
	
	//Slide the panels around on screen. Takes from, which is always ui.offset(), and to, which is the offset of the panel you want to look at.
	//When used here, ui.offset() should return Point but instead it just recurses to death. We put the function call outside, because it does not seem to be recursive when the value is passed in as a parameter.
	slide_from_to: "def(Point from, Point to) -> commands [
		set(slide_start_cycle, cycle),
		map(range(1, slide_duration+1), schedule(value, bind_command(reposition_ui))),
		set(ui.offset, def() -> Point 
			Point <- lib.math.interpolate(from, (lib.math.sin_out(slide())*9+slide()*1)/10, to) ),
	]",
},

on_create: "[
	//Pause
	set(level.paused, true),
	set(me.paused, false),
	
	//Spawn
	map(controllers, add_object(value)),
	set(inventory_gui_elements, controllers),
	
	//Fade black backdrop in.
	set(draw_area, [0,0]+level.dimensions[2:4]),
	//Alpha doesn't work with blend_modes set.
	//map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out(value/1.0/steps)*128)))) where steps = 10,
	
	//Add gui.
	set_widgets(map(ui.children, value.widget)),
	reposition_ui(),
	
	debug('created isc2', str(level.cycle)),
] where controllers = [object('minimap_controller'),]",

on_die: "[
	/* Doesn't work with blend_modes set.
	//Fade black backdrop out.
	map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out((steps-value)/1.0/steps)*128)))) where steps = 10,
	*/
	
	//Despawn
	map(inventory_gui_elements, [
		remove_object(value),
		fire_event(value, 'die'),
	]),
	
	//Unpause
	set(level.paused, false),
]",

on_process: "[
	player.track_key('i'), //close inventory
	player.track_key(left),
	player.track_key(right),
	
	add(player.cycle, 1), //pump cycle to get keyboard inputs
	if(cycle > 1 and player.ctrl_keyboard('i') = 1, [ //>1: Prevent open then close.
		fire_event('die'),
		remove_object(me),
	]),
	
	if(player.ctrl_keyboard(left)  = 1, slide_from_to(ui.offset(), [0,0])), //Can't put ui.offset() in slide_from_to.
	if(player.ctrl_keyboard(right) = 1, slide_from_to(ui.offset(), [-panel_separation,0])),
] where right = 1073741903,
         left = 1073741904, //sdl keycodes
	panel_separation = 600",


//on_wheel neither supports x scroll nor fires on this object.
		
animation: {
	id: "normal",
	image: "tiles/black_tile_overlay.png",
	x: 0,
	y: 0,
	w: 16,
	h: 16,
	frames: 1,
	duration: -1,
},
}