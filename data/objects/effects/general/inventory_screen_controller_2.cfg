{
id: "inventory_screen_controller_2",
ignore_collide: true,
zorder: "@include data/zorder.cfg:ovelaid_gui_dialog_underlay",
use_absolute_screen_coordinates: true,
blend_mode_source: "zero",
blend_mode_dest: "dst_color",
is_strict: true,

types: {
	Vector: "Point",
},

properties: {
	//Config Options:
	pause_level: true,
	panel_separation: 600,
	max_slide_duration: 10, //tween duration between the inventory and map panels

	//Art Config Options:
	panel_dimensions: [256, 256],


	//Properties:
	inventory_gui_elements: { type: "[custom_obj]", default: [] },

	frogatto: "obj frogatto_playable <- level.player",

	panel_offset: {
		type: "function() -> Vector",
		init: "def() [0,0]",
	},

	num_panels: {type: "int", dynamic_initialization: true},
	focused_panel_num: {type: "int", default: 0},


	//Functions:

	reposition_ui: "def(null|function() -> Point newOffset=null) -> commands
		set(me.mid_xy, lib.standardize.to_int_point(panel_offset()))",


	slide_start_cycle: {default: 1},
	slide: "def() -> decimal lib.math.constrain(0, (cycle-slide_start_cycle)/1.0/max_slide_duration, 1)",


	//Slide the panels around on screen by setting a function that gives their location.
	//Note: "from" should always be panel_offset(). If we directly reference panel_offset in the property, when we set panel_offset to the new offset-finding function, the function will happily recurse to death because it's now calling itself. To prevent this from happening, we need to be calling the /old/ function for the panel offset, which is captured when it's passed in as a parameter.
	slide_from_to: "def(Point from, Point to) -> commands [
		set(slide_start_cycle, cycle),
		map(range(1, max_slide_duration+1), schedule(value, bind_command(reposition_ui))),
		set(panel_offset, def() -> Point
			Point <- lib.math.interpolate(from, lib.math.interpolate(lib.math.sin_out(slide()), 0.1, slide()), to) ),

	]",

	//1 to slide left, -1 to slide right.
	slide_to_relative_panel: "def(int direction) -> commands [
		set(focused_panel_num, new_panel_num),
		slide_from_to(panel_offset(), [-panel_separation*new_panel_num,0])
	] where new_panel_num = lib.math.constrain(0, focused_panel_num+direction, num_panels-1)",



	add_status_panel: "def(int index) -> commands [
		add_object(status_pane),

		set_widgets(
			status_pane,
			{
				//Widget for quest log.
				type: 'rich_text_label',
				id: 'chat',
				width: 500, height: 400,
				font_size: 16,
				parent: status_pane,
				auto_scroll_bottom: true,
				alpha: 50,
				x: 270, y: 25,
			},{
				//Widget for quest log.
				type: 'text_editor',
				width: 335, height: 365,
				font_size: 16,
				parent: status_pane,
				auto_scroll_bottom: true,
				alpha: 50,
				x: 25, y: 25,
				text: q(Journal\n\n- Woke up feeling like going\n  right today.\n- Went to nene's house.\n  - Took care of some ants.\n  - Got the fire talisman!),
				colour: 'white',
				bg_colour: '.0 .0 .0 .2',
				//on_change: q(debug('hi')),
			},{
				//Frogatto image.
				type: 'image',
				image: if(frogatto.swallowed_object, 'characters/fat-frogatto-spritesheet1.png', 'characters/frogatto-spritesheet1.png'),
				area: [2,89,33,121],
				image_width: (33-2)*4,
				image_height: (121-89)*4,
				x: 370, y: 25,
			},

			if(frogatto.swallowed_object, {
				//Frogatto belly contents.
				type: 'animation',
				object: frogatto.swallowed_object.type, //frogatto.type works just as well, here.
				name: 'on_back',
				x: 435, y: 120,
			}),

			[{
				//Ability icons
				//TODO: Make these clickable and responsive to the attack switch button.
				//TODO: Make super-powered indicator when you've something swallowed with enough mana.
				type: 'image',
				image: 'props/store-items.png',
				area: [int] :: { //If this is null, you need to add the new current ability below.
					'tongue'    : {locked: [121,264,137,279], unlocked: [121,179,137,194], active: [1,179,17,194]}, //All rects in x1y1x2y2 format.
					'firebreath': {locked: [121,264,137,279], unlocked: [121,196,137,211], active: [1,196,17,211]},
					'energyshot': {locked: [121,264,137,279], unlocked: [121,145,137,160], active: [1,145,17,160]},
					'homingshot': {locked: [121,264,137,279], unlocked: [121,213,137,228], active: [1,213,17,228]},
					'acidbreath': {locked: [121,264,137,279], unlocked: [121,230,137,245], active: [1,230,17,245]},
				}[ability_name][ability_status]
					where ability_status = switch(true,
						ability_name = frogatto.current_ability_name, 'active',
						ability_name in frogatto.ability_list, 'unlocked',
						'locked'),
				image_width: 16*3,
				image_height: 16*3,
				x: 380 + 16*(int :: {tongue: 0, firebreath: 4, energyshot: 0, homingshot: 4, acidbreath: 2}[ability_name]),
				y: 175 + 16*(int :: {tongue: 0, firebreath: 0, energyshot: 4, homingshot: 4, acidbreath: 8}[ability_name]),
			} | ability_name <- frogatto.ability_list_full],

			//Trophy display
			map(
				filter(
					[
						{kind: 'ant',          rect: [0,0,31,31]}, //Image rects, from trophy.cfg
						{kind: 'kitty',        rect: [32,0,63,31]},
						{kind: 'bunny',        rect: [64,0,95,31]},
						{kind: 'milgramblock', rect: [96,0,127,31]},
						{kind: 'fumper',       rect: [0,32,31,63]},
						{kind: 'bat',          rect: [32,32,63,63]},
						{kind: 'fish',         rect: [64,32,95,63]},
						{kind: 'squirrel',     rect: [96,32,127,63]}
					],
					frogatto.get_stored_event('trophy_' + value.kind + '_acquired')
				),
				{
					//Trophy icons
					type: 'image',
					image: 'props/trophies.png',
					area: value.rect,
					x: 16 + index * 58,
					y: 425,
				}
			),
		),

	] where status_pane = object(
		'${me.type}.status_pane', 0,0,1, {
			relative_x: level.camera_position[2]/2 + index*panel_separation,
			relative_y: level.camera_position[3]/2,
			use_absolute_screen_coordinates: true,
			zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_back_panel,
			parent: me,
		}
	)",



	add_map_panel: "def(int index) -> commands [
		add_object(map_pane),

		spawn('text_controller', 0,0, {
			relative_x: 0,
			relative_y: -200,
			use_absolute_screen_coordinates: true,
			zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_gui_element,
			txt: level.id,
			align: 'center',
			parent: map_pane,
		}),

		spawn('minimap_controller', 0,0, {
			relative_x: 0,
			relative_y: 0,
			use_absolute_screen_coordinates: true,
			zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_gui_element,
			parent: map_pane,
		}),

	] where map_pane = object(
		'${me.type}.map_pane', 0,0,1, {
			relative_x: level.camera_position[2]/2 + index*panel_separation,
			relative_y: level.camera_position[3]/2,
			use_absolute_screen_coordinates: true,
			zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_back_panel,
			parent: me,
		}
	)",



	add_bestiary_panel: "def(int index) -> commands [
		add_object(bestiary_pane),
		add_object(bestiary_note_display),
		add_object(object(
			'widget_carousel', 0,0,1, ({
				relative_x: _rel_x,
				relative_y: _rel_y,
				use_absolute_screen_coordinates: true,
				parent: bestiary_pane,
				offset: [-369+_rel_x,231+_rel_y], //magic!
				display: map(beasts, 'beast', {
					//Panel contents
					type: 'animation',
					object: beast.type, //frogatto.type works just as well, here.
					name: switch(true,
						'walk' in beast.available_animations, 'walk',
						'fly' in beast.available_animations, 'fly',
						beast.animation),
					x: 64+index*64, y: 0, // beast.solid_rect.h or beast.img_h/2/2 to y-align on feet.
					//on_click: def()->commands debug('clicked ${beast.type}'), //this doesn't work
				}),
				on_change: def(string enemy_name) -> commands 
					bestiary_note_display.set_text(
						  obj.title+'\n'
						+ '(taxonomy: '+obj.taxonomy+')\n\n'
						+ obj.description+'\n'
						+ if(/*obj is in tasted*/true and obj.taste, 'Tasting Notes: '+obj.taste+'\n', '')
					) where obj = obj hittable <- object(enemy_name),
			} where _rel_x = 0, _rel_y = -100))),

		set_widgets(
			bestiary_pane,
			
			//{
			//	//In theory, this creates a nice horizontal scrollbar. In practice, it does not.
			//	type: 'scrollbar',
			//	range: 10,
			//	position: [2,5],
			//	enabled: 1,
			//	visible: 1,
			//	step: 1,
			//	arrow_step: 1,
			//	on_scroll: def(a,b) -> commands [debug('scrolled', a, b)], //this doesn't work
			//	x: 200, y: 64,
			//	w: 20, h: 100,
			//	//rotation: 90,
			//}
		),

		//spawn('text_editor_controller', 0,0, { //this doesn't work, can't be focused
		//	//default_text: 'search',
		//	relative_x: 100,
		//	relative_y: -200,
		//	use_absolute_screen_coordinates: true,
		//	zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_gui_element,
		//	parent: bestiary_pane,
		//}),

		//
	] where 
		bestiary_note_display = object('text_controller', 0,0, {
			relative_x: -200,
			relative_y: 0,
			use_absolute_screen_coordinates: true,
			zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_gui_element,
			txt: q(),
			parent: bestiary_pane,
		})
	where
		bestiary_pane = object(
			'${me.type}.map_pane', 0,0,1, {
				relative_x: level.camera_position[2]/2 + index*panel_separation,
				relative_y: level.camera_position[3]/2,
				use_absolute_screen_coordinates: true,
				zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_back_panel,
				parent: me,
			}
		),
		beasts = filter(map(keys(frogatto.enemies_seen), obj hittable <- object(value)), value.team in ['evil']),
	",
},

on_create: "[
	//Pause
	if(pause_level, set(level.paused, true)),
	if(pause_level, set(me.paused, false)),

	//Fade black backdrop in.
	null or set(draw_area, if(pause_level,
		[0, 0, level.camera_position[2]/2 + panel_separation, level.camera_position[3]/2],
		[0, 0, 0, 0]
	)),

	//Alpha doesn't work with blend_modes set.
	//map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out(value/1.0/steps)*128)))) where steps = 10,

	//Add gui.
	reposition_ui(), //set menu to starting position

	//Keep the input that opened the inventory screen from closing the inventory screen.
	if(not pause_level, add(frogatto.cycle, 1)),
	if(not pause_level, set(frogatto.control_lock, [])),

	[
		map(panes_to_add, ({test: any, add: function(int) -> commands} <- value).add(index)),
		set(num_panels, size(panes_to_add)),
	] where panes_to_add = filter([
			{test: true, add: add_bestiary_panel},
			{test: true, add: add_status_panel},
			{test: frogatto.get_stored_event('inventory_map_unlocked'), add: add_map_panel},
		], ({test: any, add: function(int) -> commands} <- value).test)
]",

		// log_message: "def(string text) ->commands [
//
		// 	set(widgets.chat, {
		// 		type: 'rich_text_label',
		// 		id: 'chat',
		// 		width: chat_width,
		// 		height: chat_height,
		// 		font_size: 18,
		// 		auto_scroll_bottom: true,
		// 		children: _widgets + new_widgets,
		// 	}),
//
		// 	add(_widgets, new_widgets),
		// ]
		// 	where new_widgets = [
		// 	{
		// 		type: 'label',
		// 		size: 18,
		// 		text: '\n' + text,
		// 		color: 'white',
		// 	}]
		// ",

on_type_updated: "[
	debug('Killed inventory screen on reload. (c${level.cycle})'),
	die(),
]",

on_die: "[
	/* Doesn't work with blend_modes set.
	//Fade black backdrop out.
	map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out((steps-value)/1.0/steps)*128)))) where steps = 10,
	*/

	//Despawn
	map(spawned_children, [
		remove_object(value),
		fire_event(value, 'die'),
	]),

	//Unpause
	if(pause_level, set(level.paused, false)),
	if(not pause_level, set(frogatto.control_lock, null)),
]",

on_process: "[
	frogatto.track_key('i'), //close inventory
	frogatto.track_key(left),
	frogatto.track_key(right),

	if(pause_level, add(frogatto.cycle, 1)), //pump cycle to get keyboard inputs
	if(cycle > 1 and frogatto.ctrl_keyboard('i') = 1, [ //>1: Prevent open then close.
		die()
	]),

	if(frogatto.ctrl_keyboard(left)  = 1, slide_to_relative_panel(-1)), //Can't put panel_offset() in slide_from_to.
	if(frogatto.ctrl_keyboard(right) = 1, slide_to_relative_panel( 1)),
] where right = 1073741903,
         left = 1073741904 //sdl keycodes
",


//on_wheel neither supports x scroll nor fires on this object.

animation: {
	id: "normal",
	image: "tiles/black_tile_overlay.png",
	x:0, y:0, w:16, h:16,
	frames: 1,
	duration: -1,
},

object_type: [{
	"@base": true,
	zorder: "@include data/zorder.cfg:ovelaid_gui_dialog_back_panel",
	animation: {
		id: "normal",
		image: 'gui/pause-menu/panel-background.png',
		x:0, y:0, w:256, h:256,
	}
},{
	id: "status_pane"
},{
	id: "map_pane"
},{
	id: "bestiary_pane"
}]
}