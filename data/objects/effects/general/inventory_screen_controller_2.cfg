{
id: "inventory_screen_controller_2",
ignore_collide: true,
zorder: "@include data/zorder.cfg:ovelaid_gui_dialog_underlay",
is_human: true,
hidden_in_game: false,
use_absolute_screen_coordinates: true,
blend_mode_source: "zero",
blend_mode_dest: "dst_color",
is_strict: true,

types: {
	Vector: "Point",
	UiNodes: "{ //Poor man's recursive data structure.
		offset: function() -> Vector,
		widget: null,
		children: [{
			offset: function() -> Vector,
			widget: widget,
			children: [{
				offset: function() -> Vector,
				widget: widget|custom_obj,
				children: [{
					offset: function() -> Vector,
					widget: widget|custom_obj,
					children: null,
				}],
			}],
		}],
	}",
	UiNode: "{ //Any single 'node', including base.
		offset: function() -> Vector,
		widget: null|widget|custom_obj,
		children: [any],
	}",
},

properties: {
	inventory_gui_elements: { type: "[custom_obj]", default: [] },
	
	player: "obj frogatto_playable <- level.player",
	
	ui: {
		type: "UiNodes",
		init: "{
			offset: def() [0,0],
			widget: null,
			children: ([{
				offset: def() [screen_center[0] - panel_size[0], screen_center[1] - panel_size[1]],
				widget: widget(me, {
					type: 'image', 
					image: 'gui/pause-menu/panel-background.png', 
					area: [0,0,panel_size[0],panel_size[1]], 
					x: 0, y: 0,
				}),
				children: [],
			},{
				offset: def() [screen_center[0] - panel_size[0] + 1200, screen_center[1] - panel_size[1]],
				widget: widget(me, {
					type: 'image', 
					image: 'gui/pause-menu/panel-background.png', 
					area: [0,0,panel_size[0],panel_size[1]], 
					x: 0, y: 0,
				}),
				children: [],
			},
			] where panel_size = [256,256],
				screen_center = [int, int] <- [v/2 | v<-level.camera_position[2:4]]
			),
		}",
	},	
	
	//Recursively recalculate the positions for the UI, to take into account scrolling and such.
	reposition_ui: "def(Point newOffset) -> commands [
		set(ui.offset, def() newOffset),
		_reposition_ui_children(newOffset, ui)
	]",
	_reposition_ui_children: "def(Vector newOffset, UiNode nodes) -> [commands]
		map([UiNode]<-nodes.children, 'node', (
			if(node.widget, [set(node.widget.x, nodeOffset[0]), set(node.widget.y, nodeOffset[1])], [])
			+ _reposition_ui_children(nodeOffset, node)
		) where nodeOffset = vec_add(newOffset, node.offset())
	)",
	
	vec_add: "def(Vector a, Vector b) -> Vector [a[0]+b[0], a[1]+b[1]]",
},

on_create: "[
	//Pause
	set(level.paused, true),
	set(me.paused, false),
	
	//Spawn
	map(controllers, add_object(value)),
	set(inventory_gui_elements, controllers),
	
	//Fade black backdrop in.
	set(draw_area, [0,0]+level.dimensions[2:4]),
	//Alpha doesn't work with blend_modes set.
	//map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out(value/1.0/steps)*128)))) where steps = 10,
	
	//Add gui.
	set_widgets(map(ui.children, value.widget)),
	reposition_ui([0,0]),
	
	debug('created isc2', str(level.cycle)+'/'+str(cycle)),
] where controllers = [object('minimap_controller'),]",

on_die: "[
	/* Doesn't work with blend_modes set.
	//Fade black backdrop out.
	map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out((steps-value)/1.0/steps)*128)))) where steps = 10,
	*/
	
	//Despawn
	map(inventory_gui_elements, [
		remove_object(value),
		fire_event(value, 'die'),
	]),
	
	//Unpause
	set(level.paused, false),
]",

on_process: "[
	player.track_key('i'), //close inventory
	player.track_key(left),
	player.track_key(right),
	
	add(player.cycle, 1), //pump cycle to get keyboard inputs
	if(cycle > 1 and player.ctrl_keyboard('i') = 1, [ //>1: Prevent open then close.
		fire_event('die'),
		remove_object(me),
	]),
	
	if(player.ctrl_keyboard(left) = 1, debug('left')),
	if(player.ctrl_keyboard(right) = 1, debug('right')),
] where left = 1073741904, right = 1073741903", //sdl keycodes

//on_wheel neither supports x scroll nor fires on this object.
		
animation: {
	id: "normal",
	image: "tiles/black_tile_overlay.png",
	x: 0,
	y: 0,
	w: 16,
	h: 16,
	frames: 1,
	duration: -1,
},
}