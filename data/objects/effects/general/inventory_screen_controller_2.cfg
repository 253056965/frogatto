{
id: "inventory_screen_controller_2",
ignore_collide: true,
zorder: "@include data/zorder.cfg:ovelaid_gui_dialog_underlay",
use_absolute_screen_coordinates: true,
blend_mode_source: "zero",
blend_mode_dest: "dst_color",
is_strict: true,

types: {
	Vector: "Point",
},

properties: {
	//Config Options:
	pause_level: true,
	panel_separation: 600,
	max_slide_duration: 10, //tween duration between the inventory and map panels
	
	//Art Config Options:
	panel_dimensions: [256, 256],
	
	
	//Properties:
	inventory_gui_elements: { type: "[custom_obj]", default: [] },
	
	player: "obj frogatto_playable <- level.player",
	
	panel_offset: {
		type: "function() -> Vector",
		init: "def() [0,0]",
	},
	
	
	reposition_ui: "def(null|function() -> Point newOffset=null) -> commands 
		set(me.mid_xy, lib.standardize.to_int_point(panel_offset()))",
	
	
	slide_start_cycle: {default: 1},
	slide: "def() -> decimal lib.math.constrain(0, (cycle-slide_start_cycle)/1.0/max_slide_duration, 1)",
	
	
	//Slide the panels around on screen by setting a function that gives their location.
	//Note: "from" should always be panel_offset(). If we directly reference panel_offset in the property, when we set panel_offset to the new offset-finding function, the function will happily recurse to death because it's now calling itself. To prevent this from happening, we need to be calling the /old/ function for the panel offset, which is captured when it's passed in as a parameter.
	slide_from_to: "def(Point from, Point to) -> commands [
		set(slide_start_cycle, cycle),
		map(range(1, max_slide_duration+1), schedule(value, bind_command(reposition_ui))),
		set(panel_offset, def() -> Point 
			Point <- lib.math.interpolate(from, lib.math.interpolate(lib.math.sin_out(slide()), 0.1, slide()), to) ),
	]",
},

on_create: "[
	//Pause
	if(pause_level, set(level.paused, true)),
	if(pause_level, set(me.paused, false)),
	
	//Fade black backdrop in.
	null or set(draw_area, if(pause_level, 
		[0, 0, level.camera_position[2]/2 + panel_separation, level.camera_position[3]/2], 
		[0, 0, 0, 0]
	)),
	
	//Alpha doesn't work with blend_modes set.
	//map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out(value/1.0/steps)*128)))) where steps = 10,
	
	//Add gui.
	reposition_ui(), //set menu to starting position
	
	//Keep the input that opened the inventory screen from closing the inventory screen.
	if(not pause_level, add(player.cycle, 1)),
	if(not pause_level, set(player.control_lock, [])),
	
	
	
	//Left Pane
	add_object(left_pane),
	execute(left_pane, set_widgets([{
		type: 'rich_text_label',
		id: 'chat',
		width: 500, height: 400,
		font_size: 16,
		parent: left_pane,
		auto_scroll_bottom: true,
		alpha: 50,
	},{
		//Frogatto image.
		type: 'image',
		image: if(player.swallowed_object, 'characters/fat-frogatto-spritesheet1.png', 'characters/frogatto-spritesheet1.png'),
		area: [2,89,33,121],
		image_width: (33-2)*4,
		image_height: (121-89)*4,
		x: 370, y: 25,
	}] + if(not player.swallowed_object, [], [{
		//Frogatto belly contents image.
		type: 'animation',
		object: (obj throwable <- player.swallowed_object).type, //player.type works just as well, here.
		name: 'on_back',
		x: 370, y: 37,
	}]) + [])),
	
	
	//Right Pane
	add_object(right_pane),
	
	spawn('text_controller', 0,0, {
		relative_x: 0,
		relative_y: -200,
		use_absolute_screen_coordinates: true,
		zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_gui_element,
		txt: level.id,
		align: 'center',
		parent: right_pane,
	}),
	
	spawn('minimap_controller', 0,0, {
		relative_x: 0,
		relative_y: 0,
		use_absolute_screen_coordinates: true,
		zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_gui_element,
		parent: right_pane,
	}),
	
] where
	left_pane = object(
		'${me.type}.left_pane', 0,0,1, {
			relative_x: level.camera_position[2]/2,
			relative_y: level.camera_position[3]/2, 
			use_absolute_screen_coordinates: true,
			zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_back_panel,
			parent: me, 
		}
	),
	right_pane = object(
		'${me.type}.right_pane', 0,0,1, {
			relative_x: level.camera_position[2]/2 + panel_separation,
			relative_y: level.camera_position[3]/2, 
			use_absolute_screen_coordinates: true,
			zorder: int<-lib.json.get_document_map('data/zorder.cfg').ovelaid_gui_dialog_back_panel,
			parent: me, 
		}
	),
",

on_type_updated: "[
	debug('Killed inventory screen on reload. (c${level.cycle})'),
	die(),
]",

on_die: "[
	/* Doesn't work with blend_modes set.
	//Fade black backdrop out.
	map(range(steps), schedule(value, set(alpha, int(lib.math.sin_out((steps-value)/1.0/steps)*128)))) where steps = 10,
	*/
	
	//Despawn
	map(spawned_children, [
		remove_object(value),
		fire_event(value, 'die'),
	]),
	
	//Unpause
	if(pause_level, set(level.paused, false)),
	if(not pause_level, set(player.control_lock, null)),
]",

on_process: "[
	player.track_key('i'), //close inventory
	player.track_key(left),
	player.track_key(right),
	
	if(pause_level, add(player.cycle, 1)), //pump cycle to get keyboard inputs
	if(cycle > 1 and player.ctrl_keyboard('i') = 1, [ //>1: Prevent open then close.
		die()
	]),
	
	if(player.ctrl_keyboard(left)  = 1, slide_from_to(panel_offset(), [0,0])), //Can't put panel_offset() in slide_from_to.
	if(player.ctrl_keyboard(right) = 1, slide_from_to(panel_offset(), [-panel_separation,0])),
] where right = 1073741903,
         left = 1073741904 //sdl keycodes
         ",


//on_wheel neither supports x scroll nor fires on this object.
		
animation: {
	id: "normal",
	image: "tiles/black_tile_overlay.png",
	x:0, y:0, w:16, h:16,
	frames: 1,
	duration: -1,
},

object_type: [{
	id: "left_pane",
	zorder: "@include data/zorder.cfg:ovelaid_gui_dialog_back_panel",
	animation: {
		id: "normal",
		image: 'gui/pause-menu/panel-background.png', 
		x:0, y:0, w:256, h:256, //If this changes, remember to update panel_dimensions. Must match right_pane.
	},
},{
	id: "right_pane",
	zorder: "@include data/zorder.cfg:ovelaid_gui_dialog_back_panel",
	animation: {
		id: "normal",
		image: 'gui/pause-menu/panel-background.png', 
		x:0, y:0, w:256, h:256, //If this changes, remember to update panel_dimensions. Must match left_pane.
	},
}],

}
