{
id: "minimap_controller",
is_strict: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
use_absolute_screen_coordinates: true,
always_active: true,
serializable: false,
solid_dimensions: [],

editor_info: {
	category: "controllers",
},

properties: {
	level_scale: "round(1 / (level.camera_position[2] / 1.0 / (level.dimensions[2] - level.dimensions[0]) / 2 / 2)) //A good default is 25. Currently sets the scale to about half of the screen width.",
	superSampleScale: 1, //exponential, be careful

	icons: { type: "[custom_obj]", default: [] },
},

on_create: "[fire_event(evt) | evt <- [
	'set_background', 
	'align_right', //after set_background, because that determines our size
	'add_icons',
]]",

on_set_background: "[
	(
	set(me.animation, {
		id: 'fbo', 
		image: 'fbo', 
		fbo: c.render(lWidth,lHeight, ([ //Draw black background.
			c.set_source_rgba(0,0,0,1),
			c.rectangle(0,0,lWidth,lHeight), 
			c.fill(),
		] + [[ //Draw white supersampled dots.
			c.set_source_rgba(1,1,1,
				fold([
					solid(
						level, 
						level.dimensions[0] + px*scale + scale/superSampleScale*ssx, 
						level.dimensions[1] + py*scale + scale/superSampleScale*ssy
					) | ssx <- range(superSampleScale),
					    ssy <- range(superSampleScale)], 
					int(a)+int(b)
				)/decimal(superSampleScale^2)
			), 
			c.rectangle(px,py,1,1), 
			c.fill(),
			] | px <- range(lWidth),
			    py <- range(lHeight)
		] + [
			c.set_source_rgba(1,0,0,1),
		] /*+ [[ //Draw hittable objects in red.
			c.rectangle(
				(obj.mid_x - level.dimensions[0])/scale, 
				(obj.mid_y - level.dimensions[1])/scale, 
				2, 2),
			c.fill(),
			] | obj <- filter(level.chars, value is obj hittable)
		]*/ + [
			//Secret areas seem to be applied after the map renders, so they're not an issue?
		])) where c = canvas(),
		         
		x:0, y:0, w:lWidth, h:lHeight,
		scale: 2,
	})
	where lWidth = (level.dimensions[2] - level.dimensions[0]) / scale,
	      lHeight = (level.dimensions[3] - level.dimensions[1]) / scale,
	where scale = level_scale,
	), 
	
	set(alpha, 200),
]",

on_align_right: "set(xy, [level.camera_position[2]-img_w, 0])",

on_add_icons: "[
	[add_object(icon) | icon <- icon_objs],
	set(icons, icon_objs),
	] where icon_objs = (fold(map(['icon_mobile', 'icon_disappears', 'icon_static'], [
		object('${me.type}.${value}', 0, 0, 1, {
			tracking: trackable_obj, 
			minimap: me,
			animation: trackable_obj.type,
		})
	| trackable_obj <- filter(level.chars, value.type in icon.available_animations) 
		where icon = object('${me.type}.${value}')
	]), a+b))
",

object_type: [{
	"@base": true,
	always_active: true,
	serializable: false,
	solid_dimensions: [],
	use_absolute_screen_coordinates: true,
	is_strict: true,
	
	properties: {
		tracking: {type: "custom_obj"},
		minimap: {type: "obj minimap_controller"},
	},
},{
	id: "icon_mobile", //Tracks to a moving object. Will remove itself if object dies.
	zorder: "@include data/zorder.cfg:in_front_of_everything_overlay + 25",
	
	on_create: "[
		fire_event('process'), //Position us first frame?
				
		//hack the padlock & key colours in, gold/silver/green/red/purple/blue/cyan
		if(tracking is obj padlock_key, set(animation, 'key ${tracking.color}')),
	]", 
	
	on_process: "[
		set(me.mid_xy,
			[int] <- zip(minimap.xy, 
				zip(level.dimensions[0:2], tracking.mid_xy, 
					(b-a)/minimap.level_scale*2), 
				a+b)),
		if(not tracking.hitpoints, die()),
	]",
		
	animation: [{
		"@base": true,
		image: "props/icons-minimap.png",
		y:23, w:7, h:9,
		frames: 1,
	},
	{ id: "padlock_key", x:8, }, //The padlock animation will get reassigned on create to the propor colour.
	{ id: "key gold", x:8, },
	{ id: "key silver", x:18, },
	{ id: "key green", x:28, },
	{ id: "key red", x:38, },
	{ id: "key purple", x:48, },
	{ id: "key blue", x:58, },
	{ id: "key cyan", x:68, },
	{
		id: "frogatto_playable",
		x:9, y:40, w:9, h:10,
		frames: 2,
		pad: 1,
	},],
}, {
	id: "icon_disappears", //A stationary icon. Will remove itself if object dies.
	zorder: "@include data/zorder.cfg:in_front_of_everything_overlay + 24",
	
	on_create: "[
		set(me.mid_xy,
			[int] <- zip(minimap.xy, 
				zip(level.dimensions[0:2], tracking.mid_xy, 
					(b-a)/minimap.level_scale*2), 
				a+b
			)
		),
				
		//hack the padlock & key colours in, gold/silver/green/red/purple/blue/cyan
		if(tracking is obj padlock, set(animation, 'lock ${tracking.color}')),
	]",
	
	on_process: "if(not tracking.hitpoints, die())",
		
	animation: [{
		"@base": true,
		image: "props/icons-minimap.png",
		y:13, w:7, h:9,
		frames: 1,
	},
	{ id: "padlock", x:8, }, //The padlock animation will get reassigned on create to the proper colour.
	{ id: "lock gold", x:8, },
	{ id: "lock silver", x:18, },
	{ id: "lock green", x:28, },
	{ id: "lock red", x:38, },
	{ id: "lock purple", x:48, },
	{ id: "lock blue", x:58, },
	{ id: "lock cyan", x:68, },
	],
}, {
	id: "icon_static", //A stationary icon. Will NOT remove itself if object dies. Fastest.
	zorder: "@include data/zorder.cfg:in_front_of_everything_overlay + 23",
	
	on_create: "[
		set(me.mid_xy,
			[int] <- zip(minimap.xy, 
				zip(level.dimensions[0:2], tracking.mid_xy, 
					(b-a)/minimap.level_scale*2), 
				a+b)),
	]",
		
	animation: "@eval [{ //Add all the doors found in the game via regex.
		id: doors,
		image: 'props/icons-minimap.png',
		x:50, y:40, w:5, h:10,
		frames: 1,
	} | doors <- [
		'cave_side_doorway_interior',
		'close_door',
		'door',
		'door_label',
		'doorway_open',
		'dungeon_interior_door',
		'dungeon_save_door',
		'dungeon_side_doorway',
		'forest_cave_side_doorway',
		'forest_house_exterior_door',
		'forest_house_exterior_door2',
		'grey_rock_cave_doorway_dark',
		'grey_rock_cave_doorway_lit',
		'open_door',
		'seaside_cave_side_doorway',
		'seaside_house_2_upper_door',
		'seaside_house_exterior_door',
		'seaside_house_exterior_door_house_1',
		'seaside_house_exterior_door_large',
		'seaside_house_interior_door',
		'seaside_house_interior_door_large',
		'seaside_house_interior_save_door',
		'seaside_interior_side_doorway',
		'trap_door',
		'wood_door_titlescreen',
		'wooden_door',
	]] + [{
		id: 'match_lock',
		image: 'props/icons-minimap.png',
		x:59, y:39, w:9, h:10,
		frames: 1,
	}]",
}],

}