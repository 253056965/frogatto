{
id: "minimap_controller",
is_strict: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
use_absolute_screen_coordinates: true,
always_active: true,

editor_info: {
	category: "controllers",
},

properties: {
},

on_create: "[
	(
	set(me.animation, {
		id: 'fbo', 
		image: 'fbo', 
		fbo: c.render(lWidth,lHeight, ([ //Draw black background.
			c.set_source_rgba(0,0,0,1),
			c.rectangle(0,0,lWidth,lHeight), 
			c.fill(),
		] + [[ //Draw white supersampled dots.
			c.set_source_rgba(1,1,1,
				fold([
					solid(
						level, 
						level.dimensions[0] + px*scale + scale/superSampleScale*ssx, 
						level.dimensions[1] + py*scale + scale/superSampleScale*ssy
					) | ssx <- range(superSampleScale),
					    ssy <- range(superSampleScale)], int(a)+int(b)
				)/decimal(superSampleScale^2)
			), 
			c.rectangle(px,py,1,1), 
			c.fill(),
			] | px <- range(lWidth),
			    py <- range(lHeight)
		] + [
			c.set_source_rgba(1,0,0,1),
		] + [[ //Draw hittable objects in red.
			c.rectangle(
				(obj.mid_x - level.dimensions[0])/scale, 
				(obj.mid_y - level.dimensions[1])/scale, 
				2, 2),
			c.fill(),
			] | obj <- filter(level.chars, value is obj hittable)
		])) where c = canvas(),
		         
		x:0, y:0, w:lWidth, h:lHeight,
		scale: 2,
	})
	where lWidth = (level.dimensions[2] - level.dimensions[0]) / scale,
	      lHeight = (level.dimensions[3] - level.dimensions[1]) / scale,
	where scale = round(1 / (level.camera_position[2] / 1.0 / (level.dimensions[2] - level.dimensions[0]) / 2 / 2)), //A good default is 25. Currently sets the scale to about half of the screen width.
	      superSampleScale = 1,
	), 
	
	set(alpha, 200),
	
	fire_event('align_right'),
]",

on_align_right: "[
	set(x, level.camera_position[2]-img_w),
	set(y, 0),
]",
}