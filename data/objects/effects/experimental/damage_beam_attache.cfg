{
	id: "damage_beam_attache",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	always_active: true,
	solid_dimensions: [],

	prototype: ["hittable"],
	editor_info: {
		category: "   ",
	},

	properties: {
		taxonomy: "'neutral'",
		attack_damage: "int :: if(higher_difficulty, 2, 1)",
		team: "string :: 'evil'",
	has_mini_hp_bar: "bool :: false",

	
		beam_angle: { type: "decimal", init: "60.0" },
		beam_distance: { type: "decimal", init: "180.0" },
		attack_diameter: "decimal :: 40.0",
		attack_radius: "decimal :: lib.math.round( attack_diameter / 2.0 )",
		hitbox_count: "decimal :: lib.math.ceil(beam_distance / (attack_radius / 1.0))",


		offset: "{ x: decimal, y: decimal } :: { x: length * cos(beam_angle), y: length * sin(beam_angle) } where length = (beam_distance / hitbox_count)", 

		hitbox_animation: "map :: {
								id: 'image',
								image: 'effects/particles.png',
								x: 0,
								y: 0,
								w: 20,
								h: 20,
								//attack_area: 'all',
								body_area: 'all',
								attack_area: [-attack_radius, -attack_radius, attack_radius, attack_radius, 'solid'],
							}",
		
		cached_hitbox_objs: { type: "[obj damage_beam_attache.hitbox_object]", init: "[]" },							
							
		process_hitboxes: "commands ::	[
											populate_hitboxes ;
											attach_hitboxes ;
											set_hitbox_anims

										]",

		attach_hitboxes: "commands ::	[
												//Since we've already grown the array, we'll always have enough hitboxes to be >= the cached array in size; we only have to handle the case where we're detaching spares, not the case where we don't have enough.
											map(range(0, hitbox_count), add_object(cached_hitbox_objs[index])),
											map(range(hitbox_count, size(cached_hitbox_objs)), remove_object(cached_hitbox_objs[index])),
										]",

		set_hitbox_anims: "commands ::	[
											map( range(0, hitbox_count),
												[
													set(box.animation, hitbox_animation),
													set(box.mid_x, mid_x + (offset.x * value)),
													set(box.mid_y, mid_y + (offset.y * value)),
												] where box = cached_hitbox_objs[index]
											)
												/*spawn('damage_beam_attache.hitbox_object', x,y, {facing: facing, mid_x: mid_x + (offset.x * value), mid_y: mid_y + (offset.y * value), animation: hitbox_animation}) )*/
										]",
							
		populate_hitboxes: "commands ::	[
											set(cached_hitbox_objs, cached_hitbox_objs + if( size(cached_hitbox_objs) > hitbox_count, [],
													map( range(size(cached_hitbox_objs), hitbox_count),
														object('damage_beam_attache.hitbox_object', x,y, {facing: facing, mid_x: mid_x + (offset.x * value), mid_y: mid_y + (offset.y * value), animation: hitbox_animation})
													)
												)
											)
										]",
	},

	on_process: "[process_hitboxes, add(beam_angle, 1)]",
	
	on_create: "process_hitboxes",

object_type: [
	{
		id: "hitbox_object",
		always_active: true,
		serializable: false,
		
		//on_create: "schedule(2, die())",
		prototype: ["hittable"],
		
		properties: {
			taxonomy: "'neutral'",
			attack_damage: "int :: if(higher_difficulty, 2, 1)",
			team: "string :: 'evil'",
	has_mini_hp_bar: "bool :: false",

		
		}
	}
],

}
