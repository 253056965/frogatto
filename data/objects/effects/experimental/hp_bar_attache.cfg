{
	id: "hp_bar_attache",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	always_active: true,
	solid_dimensions: [],

	prototype: ["effects_attache"],


	editor_info: {
		category: "aaa",
	},

	properties: {
		fraction_of_hitpoints: "decimal :: _parent_obj.hitpoints / decimal(_parent_obj.max_hitpoints)",
		missing_fraction_of_hitpoints: "decimal :: 1.0 - fraction_of_hitpoints",
		previous_hitpoints: { type: "int", dynamic_initialization: true },

		consider_drawing: "commands :: if(_parent_obj.hitpoints != previous_hitpoints, [set(previous_hitpoints, _parent_obj.hitpoints),render_bar])",
		
		interpolate_values: "def(decimal source, decimal dest, decimal fraction) -> decimal  source + (fraction * (dest - source))",
		
		interpolate_colors: "def(decimal fraction) -> [decimal, decimal, decimal, decimal]
			 if(fraction < 0.5,
                zip(green_clr, endpoint_yellow_clr,  interpolate_values(a, b, fraction) ),
                zip(startpoint_yellow_clr, red_clr, interpolate_values(a, b, fraction)))",
		
		green_clr:  "[decimal, decimal, decimal, decimal] :: [0.0, 1.0, 0.0, 1.0]",
        endpoint_yellow_clr: "[decimal, decimal, decimal, decimal] :: [2.0, 1.0, 0.0, 1.0]",
        startpoint_yellow_clr: "[decimal, decimal, decimal, decimal] :: [1.0, 2.0, 0.0, 1.0]",
		red_clr:  "[decimal, decimal, decimal, decimal] :: [1.0, 0.0, 0.0, 1.0]",
		
		render_bar: "commands :: [
			(
			set(me.animation, {
				id: 'fbo', 
				image: 'fbo', 
				pivot_origin: [0,0],
				blend: ['src_color','one_minus_src_alpha'],

				fbo: c.render(bar_width,bar_height+1, (
		
				[[
					c.set_source_rgba(clr[0], clr[1], clr[2], clr[3]) where clr = interpolate_colors(missing_fraction_of_hitpoints), 
					c.rectangle(px,py,1,1), 
					c.fill(),
					] | px <- range(bar_width),
						py <- range(bar_height)
				] + [[ //render red portion
					c.set_source_rgba(0,0,0, 1.0), 
					c.rectangle(px,py,1,1), 
					c.fill(),
					] | px <- range(bar_width - proportional_width, bar_width),
						py <- range(bar_height)
				] + [[ //render shadow
					c.set_source_rgba(0,0,0, 0.2), 
					c.rectangle(px,py,1,1), 
					c.fill(),
					] | px <- range(bar_width),
						py <- [bar_height]
				]
			
				)),
				 
				x:0, y:0, w:bar_width, h:bar_height+1,
				scale: 2,
			})
				where c = canvas(),
				where	proportional_width = lib.math.round(bar_width * missing_fraction_of_hitpoints),
				where	bar_width = 32,
						bar_height = 3,
			),
		]",
	},

	on_create: "[set(previous_hitpoints, _parent_obj.hitpoints), bind_command(def() render_bar)]",
	
	on_process: "consider_drawing",

}
