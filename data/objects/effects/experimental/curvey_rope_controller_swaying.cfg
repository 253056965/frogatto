{
id: "curvey_rope_controller_swaying",
next_animation: "'normal'",
always_active: true,
timer_frequency: 3,
is_strict: false,

editor_info: {
	category: "controllers, vfx",
	help: "Assign the rope controller a label. Assign another
		object a label_of_this_object space sequencial_number.
		---
		Resolution: Number of subsections. Lower is faster.
		Sway: How much to move (x axis).",
},

properties: {
	bcurve: "def([[decimal, decimal]] points, decimal percent) -> [[decimal, decimal]]
		if(size(points)=2, 
			[[(points[0][0]*(100-percent) + points[1][0]*percent)/100.0, 
			(points[0][1]*(100-percent) + points[1][1]*percent)/100.0]], 
			bcurve((map(range(size(points)-1), 'ind', bcurve(points[ind:ind+2], percent)))[0], percent)
			)",


#-------------------------- vars --------------------------#
	_control_points: { type: "[[decimal,decimal]]", default: [], editor_info: { type: "points" } },
	resolution: { type: "int", default: 10, editor_info: { type: "int", value: "10" } },
	sway: { type: "int", default: 70, editor_info: { type: "int", value: "70" } },
	frequency: { type: "int", default: 2, editor_info: { type: "int", value: "2" } },
	center: { type: "int", default: 40, editor_info: { type: "int", value: "40" } },
	segments: { type: "[obj rope_angled_controller]", default: [] },
},
on_timer: "if(_control_points, [
			map(_control_points[1:size(_control_points)-1], set(value[0], value[0]+delta)) where delta = sin((cycle+center)*frequency)/sway,
			fire_event('set_segments'),
		])",
on_create: "if(_control_points, [set(alpha, 0), 
		[map(segments, 'seg', add_object(seg)),
		set(segments, segments),
		fire_event('set_segments'),
		]
			where segments = map(range(0,resolution), 'point', object('rope_angled_controller', bcurve(_control_points, ind)[0][0], bcurve(_control_points, ind)[0][1], {facing: 0, index: ind})
				where ind = point * (100.0/resolution) 
			)]
			)
		where resolution = resolution",
on_set_segments: "map(segments, 'segment', [
			segment.set_ends(
				bcurve(_control_points, segment.index+0/resolution)[0][0], 
				bcurve(_control_points, segment.index+0/resolution)[0][1], 
				bcurve(_control_points, segment.index+100.0/resolution+1)[0][0], 
				bcurve(_control_points, segment.index+100.0/resolution+1)[0][1]
			),
		]) where resolution = resolution",
on_end_anim: "animation('normal')",
zorder: "@include data/zorder.cfg:in_front_of_everything",
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 104,
	w: 28,
	h: 28,
},
}
