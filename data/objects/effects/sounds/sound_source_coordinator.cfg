//This object is automatically spawned by "sound-sources" in-game; it doesn't need to manually be placed by people editing levels, nor does it need to be spawned by object-writers who are using sound-sources to give in-game objects a tracked sound.  This coordinates multiple instances of a single sound so that only one instance of them plays at a given time, passing control to a new one if one of them is going to be removed.

{
id: "sound_source_coordinator",
hidden_in_game: true,
always_active: true,
is_strict: true,

properties: {
	add: "def(obj sound_source source) -> commands execute(me, [
		add(me.monitoring, [source]),
		set(source._sound_coordinator, me),
	])",
	remove: "def(obj sound_source source) -> commands execute(me, [
		set(me.monitoring, newMonitoring),
		set(source._sound_coordinator, null),
		if(not newMonitoring, schedule_destruction),
	] where newMonitoring = filter(me.monitoring, value!=source))",
	
	loudest_source: "decimal|null :: max(map(monitoring, value.sound_volume_multiplier(value, level.player)))",
	loudest_source_obj: "obj sound_source|null :: if(size(monitoring),
		head(sort(monitoring, (obj sound_source <- a).sound_volume_multiplier(a, level.player) > (obj sound_source <- b).sound_volume_multiplier(b, level.player) )), null)",


		/*
			Without this logic, our stereo separation works fine for singular sound sources, but it won't correctly combine the contributions of multiple sounds.  The failure case lies in having a loudest sound to (for example) the right, which gives a final volume of [0.2, 1.0], and then having a second-loudest sound to the left, which gives [0.5, 0.0].  Effectively the loudness of the leftward sound would be completely disregarded, and it would feel to the player that it was muted.
			
			Instead, we partition the gamespace into 'sounds left of the player' and 'sounds to the right'.  We then take the loudest of both, and max() their values against each other, so if there's a sound of some considerable volume coming from each side, it sounds like that to the player.
		*/
	loudest_rightward_source_obj: "obj sound_source|null :: if(size(rightward_monitoring),
		head(sort(rightward_monitoring, (obj sound_source <- a).sound_volume_multiplier(a, level.player) > (obj sound_source <- b).sound_volume_multiplier(b, level.player) )), null)
		where rightward_monitoring = filter(monitoring, value.mid_x >= level.player.mid_x)",

	loudest_leftward_source_obj: "obj sound_source|null :: if(size(leftward_monitoring),
		head(sort(leftward_monitoring, (obj sound_source <- a).sound_volume_multiplier(a, level.player) > (obj sound_source <- b).sound_volume_multiplier(b, level.player) )), null)
		where leftward_monitoring = filter(monitoring, value.mid_x < level.player.mid_x)",
		
	combined_stereo_pan: "[decimal, decimal]|null ::	
			if(leftie != null and rightie != null,
				[max(stereo_pan(leftie)[0], stereo_pan(rightie)[0]), max(stereo_pan(leftie)[1], stereo_pan(rightie)[1])],
				if(leftie != null,
					stereo_pan(leftie),
					if(rightie != null,
						stereo_pan(rightie),
						null
					)
				)
			)	
		where leftie = loudest_leftward_source_obj
		where rightie = loudest_rightward_source_obj",


	max_delta: "decimal :: 0.1",

	schedule_destruction: "commands :: execute(me, [stop_sound(sound_file, death_delay/50.0), schedule(death_delay, remove_object(me))] where death_delay = 20)",



	stereo_pan: "def(obj sound_source loudest_source_obj) -> [decimal, decimal] ((
						[	
							lib.math.constrain(volume, source_obj.distance_attenuation_function(dist_to_player(-ear_radius)), 1.0),
							lib.math.constrain(volume, source_obj.distance_attenuation_function(dist_to_player(ear_radius)), 1.0)
						]
					) where volume = lib.math.constrain(0, source_obj.distance_attenuation_function(dist_to_player(0)), max_volume)
				) where dist_to_player = def(decimal x_offset) -> decimal source_obj.sound_distance(source_obj, level.player, {x: x_offset, y: 0})
				where ear_radius = 250
				where max_volume = source_obj._sound_volume_scale.max
				where source_obj = (obj sound_source <- loudest_source_obj)",	



#-------------------------- vars --------------------------#
		
	sound_file: { type: "string", dynamic_initialization: true },
	monitoring: { type: "[obj sound_source]", default: [] },		//Sources to monitor. We'll only play the loudest one... not technically correct, but close enough.
	old_loudest_source: { type: "decimal|null", default: null },
	
},

on_create: "sound_loop(sound_file, 0)",

on_process: "[
	//debug((cycle) + newVol != null),
	if(newVol != null,
		[
			set(old_loudest_source, newVol),
			sound_volume(lib.math.round(newVol*128)),
			if(combined_stereo_pan != null, sound_pan(sound_file, (combined_stereo_pan)))
		]
	)

	] where newVol = 
		if(old_loudest_source != null and loudest_source != null, 
			lib.math.constrain(	old_loudest_source - max_delta, 
						loudest_source, 
						old_loudest_source + max_delta), 
			loudest_source)",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
}

