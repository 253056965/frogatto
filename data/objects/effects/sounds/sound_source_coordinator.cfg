//This object is automatically spawned by "sound-sources" in-game; it doesn't need to manually be placed by people editing levels, nor does it need to be spawned by object-writers who are using sound-sources to give in-game objects a tracked sound.  This coordinates multiple instances of a single sound so that only one instance of them plays at a given time, passing control to a new one if one of them is going to be removed.

{
id: "sound_source_coordinator",
hidden_in_game: true,
always_active: true,
is_strict: true,

properties: {
	add: "def(obj sound_source source) -> commands execute(me, [
		add(me.monitoring, [source]),
		set(source._sound_coordinator, me),
	])",
	remove: "def(obj sound_source source) -> commands execute(me, [
		set(me.monitoring, newMonitoring),
		set(source._sound_coordinator, null),
		if(not newMonitoring, schedule_destruction),
	] where newMonitoring = filter(me.monitoring, value!=source))",
	
	loudest_source: "decimal|null :: max(map(monitoring, value.sound_volume_multiplier(value, level.player)))",
	loudest_source_obj: "obj sound_source|null :: if(size(monitoring),
		
	head(sort(monitoring, (obj sound_source <- a).sound_volume_multiplier(a, level.player) > (obj sound_source <- b).sound_volume_multiplier(b, level.player) )), null)",


	max_delta: "decimal :: 0.1",

	schedule_destruction: "commands :: execute(me, [stop_sound(sound_file, death_delay/50.0), schedule(death_delay, remove_object(me))] where death_delay = 20)",



	stereo_pan: "def(obj sound_source loudest_source_obj) -> [decimal, decimal] ((
						[	
							lib.math.constrain(volume, falloff_dist/dist_to_player(-ear_radius), 1.0),
							lib.math.constrain(0, falloff_dist/dist_to_player(ear_radius), 1.0)
						]
					) where volume = lib.math.constrain(0, decimal(falloff_dist)/dist_to_player(0), max_volume)
				) where dist_to_player = def(decimal x_offset) -> decimal lib.math.length(source_obj.mid_x, source_obj.mid_y, level.player.mid_x + x_offset, level.player.mid_y),
				where ear_radius = falloff_dist
				where falloff_dist = source_obj._falloff_distance
				where max_volume = source_obj._sound_volume_scale.max
				where source_obj = (obj sound_source <- loudest_source_obj)",	


#-------------------------- vars --------------------------#
		
	sound_file: { type: "string", dynamic_initialization: true },
	monitoring: { type: "[obj sound_source]", default: [] },		//Sources to monitor. We'll only play the loudest one... not technically correct, but close enough.
	old_loudest_source: { type: "decimal|null", default: null },
	
},

on_create: "sound_loop(sound_file, 0)",

on_process: "[
	//debug((cycle) + newVol != null),
	if(newVol != null,
		[
			set(old_loudest_source, newVol),
			sound_volume(lib.math.round(newVol*128)),
			if(loudest_source_obj != null, sound_pan(sound_file, (stereo_pan(loudest_source_obj))))
		]
	)

	] where newVol = 
		if(old_loudest_source != null and loudest_source != null, 
			lib.math.constrain(	old_loudest_source - max_delta, 
						loudest_source, 
						old_loudest_source + max_delta), 
			loudest_source)",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
}

