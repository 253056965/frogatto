{
id: "sound_source_area",
zorder: "@include data/zorder.cfg:in_front_of_everything",
prototype: ["sound_source"],
hidden_in_game: true,
is_strict: false,
always_active: true,
ignore_collide: true,

properties: {

	_sound_distance: "def(obj sound_source source, obj player_controlled reciever) -> decimal decimal(max( if(reciever.x > source_area.x_bound and reciever.x < source_area.x2_bound, 1,
			min(abs(reciever.x - source_area.x_bound),abs(reciever.x - source_area.x2_bound))),
		if(reciever.y > source.y_bound and reciever.y < source_area.y2_bound, 1,
			min(abs(reciever.y - source_area.y_bound),abs(reciever.y - source_area.y2_bound))) )) where source_area = (obj sound_source_area <- source)",


},

editor_info: {
	category: "controllers",
	help: "Plays a sound that comes from a rectangular area, and only diminishes in volume if it's outside of that area.\nsound_file: The filename, relative to the 'sounds/ambient' folder; eg., 'cannon.ogg'.",
	var: [
		{
			name: "sound_file",
			type: "enum",
			value: "''",
	        enum_values: "@eval map(get_files_in_dir('sounds/ambient'), 'ambient/'+value)",
		},
		{
			name: "x_bound",
			type: "x",
			value: "x-100",
		},
		{
			name: "x2_bound",
			type: "x",
			value: "x+150",
		},
		{
			name: "y_bound",
			type: "y",
			value: "y-100",
		},
		{
			name: "y2_bound",
			type: "y",
			value: "y+150",
		},
	],
},

on_end_anim: "animation('normal')",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
}
