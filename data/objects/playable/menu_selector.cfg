{
id: "menu_selector",
prototype:  ["player_controlled"],
ignore_collide: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
is_human: true,

editor_info: {
	category: "player",
},
	

properties: {
	cursor_offset: "[decimal|int] :: [-18,0]",

	item_chars: "filter(level.chars, value is obj menu_item_textual)",
	
	closest_item: "obj menu_item_textual <- choose(item_chars, -lib.math.length(value, [midpoint_x - cursor_offset[0], midpoint_y - cursor_offset[1]]))",
	click_item: "def(Numeric x, Numeric y) -> object choose(item_chars, -lib.math.length(value, [x, y]))",
	
	first_item: "closest_item.default_in_group",
	
	select: "overload(
		def(obj menu_item_textual item) -> commands [
			set(xy, zip([int] <- item.xy, cursor_offset, a+b)),
			set(currently_selected, item),
			fire_event(item, 'selected'),
			if(currently_selected, fire_event(currently_selected, 'deselected')),
			if(currently_selected, commands <- currently_selected.show_selector),
			commands <- item.hide_selector,
			fire_event(item, 'activate'),
			if(level.cycle > 10, sound('MenuCursorMove.ogg')),
			],
		def(any item) fire_event('failed_select')
	)",
		
	// dump([value.msg, decimal(x-value.x)/decimal(y-value.y)], true))
	next_item: "def(int direction) -> obj menu_item_textual|null //as on a number pad
		choose(
			filter(item_chars,
				switch(direction,
					2, value.y > y2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) <= 1,
					4, value.x < x2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) >= 1, // The below is a strange workaround for a bug involving infinite math. the abs() is returning the absolute of -inf8, which is one more than inf7, so it wraps back around to -inf8. However, -1/0 is inverting inf7, coming out with -inf7, which is one more than -inf8â€¦ as far as I can tell.
					6, value.x > x2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) >= 1,
					8, value.y < y2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) <= 1,
				//	Who do we appreciate?
					)),
			-lib.math.length(value, [midpoint_x - cursor_offset[0], midpoint_y - cursor_offset[1]]))
			where x2 = x - self.cursor_offset[0]
			where y2 = y - self.cursor_offset[1]",
			
	screen_scale_factor: 1,
	
	currently_selected: { type: "obj menu_item_textual|null", default: null},
	player: { type: "obj player_controlled|null", default: null},
	
	//Needed to appease player_controlled. >:(
	mana_regen_per_frame: 1,
},

on_start_level: "[
	select(first_item),
	set(alpha,0),
	spawn(me.type+'.arrow',mid_x,mid_y,facing, [set(child.parent,me)])
	]",
	
on_ctrl_down: "select(next_item(2))",
on_ctrl_up:   "select(next_item(8))",
on_ctrl_left: "if(next, select(next.selector.targeting) asserting next.selector) where next = next_item(4)",
on_ctrl_right:"if(next, select(next.selector.targeting) asserting next.selector) where next = next_item(6)",

"on_mouse_down*": "if(arg.mouse_button in [1,3], select(click_item(arg.mouse_x*screen_scale_factor, (arg.mouse_y+8)*screen_scale_factor )))",

on_ctrl_tongue: "fire_event('finish_menu')",
on_ctrl_attack: "fire_event('ctrl_tongue')",
on_ctrl_jump: "fire_event('ctrl_tongue')",

//on_finish_menu: "",  //TODO virtual, would be defined in level, except :  need to know how to assign event handlers in spawn(), because on the titlescreen we have to spawn our playable object, we can't put stuff in the instance of the playable object that's on the actual level, because we obliterate that when we transfer to the level.
"on_finish_menu": "if(cycle > 30, [
 		set(control_lock, []),
 		screen_flash([255,255,255,0], [0,0,0,5], 51),
 		if(player,
			schedule(49, [
				set(player.alpha, 0),
				execute(player, schedule(1, set(brightness, 255))),
				set(player.difficulty, level.player.difficulty),
				add_object(player), teleport('frogatto-grotto-frogattos-room.cfg','','instant'),sound('MenuConfirm.ogg'),
				set(control_lock, null),
				]) ),
 		])",

on_process:"
	if(13 in ctrl_keys or ' ' in ctrl_keys,
		fire_event('finish_menu')
	)",

animation: {
	id: "normal",
	image: "characters/stand_in_selector.png",
	rect: [0,0,15,15],
},

object_type: [
	{
		id: "arrow",
		ignore_collide: true,
		zorder: "@include data/zorder.cfg:in_front_of_everything",
		
		on_create: "set(rotate,-90)",
		on_process:  "[set(relative_x, -50 + 4*sin(cycle*10)),set(relative_y, 2 - img_h/2)]",
		on_end_anim: "set(animation,animation)",
		
		animation: {
			id: "normal",
			image: "gui/arrow-menu-cursor.png",
			rect: [0,0,23,23],
			frames: 8,
			frames_per_row: 4,
			duration: 3,
		},
	},
	{
		id: "arrow_selected",
		ignore_collide: true,
		zorder: "@include data/zorder.cfg:in_front_of_everything",
		zsub_order: -10,
		
		properties: {
			targeting: { type: "obj menu_item_textual|null", default: null},
		},
		
		on_create: "set(rotate,-90)",
		on_end_anim: "set(animation,animation)",
		
		animation: {
			id: "normal",
			image: "gui/arrow-menu-selected.png",
			rect: [0,0,23,23],
			frames: 1,
			duration: 100,
		},
	}],

}
