{
id: "platform_swaying",
properties: {
	pulleyDiameter: 18,
	sagOffset: 15,
	topRopeH: "pulleyDiameter+sagOffset",
	polarity: "sign(_move_x2-_move_x1)",

	#if the platform is flipped, some values need to run in the opposite direction - such as pulley rotation
	point1: "[_move_x1, _move_y1]",
	point2: "[_move_x2, _move_y2]",
	setPos: "def(to) [
			set(knot.midpoint_x, to[0]), 
			set(knot.midpoint_y, to[1]),
			set(left_pulley.midpoint_x, point1[0]),
			set(left_pulley.midpoint_y, point1[1]-sagOffset -pulleyDiameter/2),
			set(left_pulley.rotate, polarity*(sin(progress)+1)/2*180*15),
			set(right_pulley.midpoint_x, point2[0]),
			set(right_pulley.midpoint_y, point2[1]-sagOffset -pulleyDiameter/2),
			set(right_pulley.rotate, polarity*(sin(progress)+1)/2*180*15),
			
			
			top_rope.set_ends_and_offset(point1[0], point1[1]-topRopeH, point2[0], point2[1]-topRopeH, lib.math.length(point1[0], point1[1],to[0],to[1])/2),
			left_rope.set_ends_and_offset(to[0], to[1], point1[0], point1[1]-sagOffset, 0),
			right_rope.set_ends_and_offset(to[0], to[1], point2[0], point2[1]-sagOffset, 0),
			]",
	pos: "[knot.midpoint_x, knot.midpoint_y]",
	stop: "map(range(steps+1), 'step', schedule(step, set(stopped, bool(1-(steps-step)/decimal(steps))))) where steps = 100",

	#Might want to include an if statement to only do this if it'll decrease speed.
	go: "map(range(steps+1), 'step', schedule(step, set(vars.stopped,   (steps-step)/decimal(steps)))) where steps = 100",
	actBsize: "max(abs(_move_x1-_move_x2),abs(_move_y1-_move_y2))*2",
	actMargin: "100", //
	actArea: "[point1[0] - 50 - actMargin, min(point1[1],point2[1]) - actMargin, point2[0]-point1[0] + 100 + actMargin*2, abs(point2[1]-point1[1]) + rope_height + 50 + actMargin*2]",
	
	list_tween: "def(list_one, list_two, percent_raw) 
		map(range(size(list_one)), 'index', list_one[index]*(percent) + list_two[index]*(1.0-percent)) where percent = lib.math.constrain(0, percent_raw, 1)",

#-------------------------- vars --------------------------#
	actual_speed: { type: "decimal", default: 0 },

	top_speed: { type: "decimal", editor_info: { type: "int", value: "10", min_value: 0, max_value: 25 } },
	_move_x1: { type: "int", editor_info: { type: "x", value: "x + if(facing < 0, 9, 0)" } },
	_move_x2: { type: "int", editor_info: { type: "x", value: "x + img_w - if(facing > 0, 9, 0)" } },
	_move_y1: { type: "int", editor_info: { type: "y", value: "y + img_h - 34" } },
	_move_y2: { type: "int", editor_info: { type: "y", value: "y + img_h" } },
	stopped: { type: "bool", editor_info: { type: "boolean", value: "false" } },
	progress: { type: "decimal", editor_info: { type: "int", value: "0" } },
	is_zipline: { type: "bool", editor_info: { type: "boolean", value: "false" } },

	right_pulley: { type: "obj platform_swaying.pulley", dynamic_initialization: true },
	left_pulley: { type: "obj platform_swaying.pulley", dynamic_initialization: true },
	top_rope: { type: "obj rope_angled_controller", dynamic_initialization: true },
	left_rope: { type: "obj rope_angled_controller", dynamic_initialization: true },
	right_rope: { type: "obj rope_angled_controller", dynamic_initialization: true },
	knot: { type: "obj platform_swaying.knot", init: "object('platform_swaying.knot',_move_x1,_move_y1)" },
#-------------------------- temporary vars --------------------------#
	_last_progress: { type: "decimal", default: 0, persistent: false },
},
tmp: {
	cache: null,
},


hidden_in_game: true,

on_start_level: "set(activation_area, actArea)",

on_editor_changed_variable: "[set(tmp.cache, create_cache()), fire_event('done_create')]",

on_load: "set(tmp.cache, create_cache())",
on_create: "[
		set(activation_area, actArea),
		spawn('sound_source_individual',_move_x1, _move_y1,1,[set(child.sound_file,'ambient/squeakygearsturning.ogg')]),
		spawn('sound_source_individual',_move_x2, _move_y2,1,[set(child.sound_file,'ambient/squeakygearsturning.ogg')]),
		[add_object(knot), set(knot.activation_area, actArea)],
		
		if(1, #here, we'd want to switch based on available types of platform, for now we'll just have one.#
			[add_object(obj),
			set(vars.the_platform, obj)
			] where obj = object('platform_swaying.simple_platform_controller',_move_x1,_move_y1,facing,{'parent'->me,'activation_area'->actArea})
		),

		[add_object(obj),
		set(left_pulley, obj)
		] where obj = object('platform_swaying.pulley',_move_x1,_move_y1,facing,{'activation_area'->actArea}),

		[add_object(obj),
		set(right_pulley, obj)
		] where obj = object('platform_swaying.pulley',_move_x1,_move_y1,facing,{'activation_area'->actArea}),
		
		[add_object(obj),
		set(top_rope, obj)
		] where obj = object('rope_angled_controller',_move_x1,_move_y1,facing,{'activation_area'->actArea}),
		
		[add_object(obj),
		set(left_rope, obj)
		] where obj = object('rope_angled_controller',_move_x1,_move_y1,facing,{'activation_area'->actArea}),
		
		[add_object(obj),
		set(right_rope, obj)
		] where obj = object('rope_angled_controller',_move_x1,_move_y1,facing,{'activation_area'->actArea}),
		
		if(is_zipline, [set(progress, 95), set(stopped, true)]),
		]",
		
on_done_create: "set(actual_speed, top_speed*50/lib.math.length(point1, point2))",

on_process: "[
	add(progress, actual_speed*(1-int(stopped))),
	if(_last_progress = null or progress != _last_progress,
	query_cache(
		tmp.cache, 
		int(progress)%360, 
		setPos(newPos) where newPos = zip(list_tween(point1, point2, (sin(progress)+1)/2), [0, 0], a+b)))
	]",

# list_tween takes two lists and a %, and returns the value % of the way between every pair of indices between the two lists.
#   So what's going on here, is that we're using list_tween to determine the "how far" position between the two endpoints (mostly X, but there is some Y, moreso with more tilt), and then to make the rope sag, we're using zip to compose this with a function that only displaces the rope along Y - and this function is wrapped in a sqrt to make it flush at the ends, and sag only in the middle.
on_button_pressed: "go",
on_button_released: "stop",
editor_info: {
	category: "platforms",
	help: "A moving platform rigged from ropes.",
},
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
object_type: [
	{
		id: "knot",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		animation: {
			id: "normal",
			image: "props/rope-platform.png",
			rect: [81,1,93,13],
			frames: 1,
			duration: 1000,
			palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
		},
	},
	{
		id: "pulley",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		animation: {
			id: "normal",
			image: "props/rope-platform.png",
			rect: [65,1,77,13],
			frames: 1,
			duration: 1000,
			palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
		},
	},
	{
		id: "simple_platform_controller",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		properties: {
			tilt: 0,
			basketWobble: "sin(cycle*8)*vars.bwmag*0.55",
			parentSpeed: "(1.0 - int(lib.standardize.decimal(parent.stopped)))",

			#if the platform is has a very short horizontal path, it looks goofy to have it's sway not shrink proportionally. However, anything more than the 'normal' sway at a width of about 400 would also be bad, so we cap it above that value, and shrink it below it.
			#we're also making this dependent on the rope's length - shorter ropes need to sway less.
			sway_dampener: "max(1.0,abs(parent.point1[0] - parent.point2[0])/800.0)*min(1.0,parent.rope_height/128.0)",

			#the horizontal offset in pixels, from hanging directly downward.
			sway_x: "sway_dampener* parent.polarity * parentSpeed/1.5 * ((100*sin(vars.inertia/2))+basketWobble/2)",
			setPos: "def() [
				vert_rope.set_ends(parent.knot.midpoint_x, parent.knot.midpoint_y, parent.knot.midpoint_x + sway_x, parent.knot.midpoint_y + parent.vars.rope_height),
				[
				set(vars.basket.midpoint_x, basketMidX),
				set(vars.basket.midpoint_y, basketMidY),
				//We can set either position or velocity, but we can't set both because it makes Frogatto glitch when he stands on the platform.
				set(vars.basket.rotate, parent.polarity * parentSpeed*(-vars.inertia/6.0 + basketWobble)),
				] where basketMidX = parent.knot.midpoint_x+sway_x
				where basketMidY = parent.knot.midpoint_y + parent.vars.rope_height,
	
			]",
			decayBasketWobble: "def() set(vars.bwmag, max(6.0,decimal(vars.bwmag)*(0.99/1)))",
			setInertia: "def() [
						schedule(2, 
						
						set(vars.inertia, 50*(sin(parent.progress- if(parent.vars.is_zipline, -180, 180) *parent.polarity))))
			]",

			# if this is a zipline, we want the sway from inertia to kick in at a slightly different phase.  It looks weird if it kicks in as soon in a cycle as it does for a regular platform.
			player_is_standing_on_us: "if(level.player.standing_on = vars.basket,1,0)",
			not_in_zipline_bottomOut: "if(mod(parent.progress-90,360) < 150 or mod(parent.progress-90,360) > 210, 1, 0)",
			not_in_zipline_topOut: "if(mod(parent.progress-90,360) > 50 and mod(parent.progress-90,360) < 300, 1, 0)",
			testZipline: "def() if(parent.vars.is_zipline,
				[if(player_is_standing_on_us, if(not_in_zipline_bottomOut, [if(mod(parent.progress-90,360) > 180, set(parent.progress,parent.progress - 2*mod(parent.progress-90,180) )),
				if(parent.stopped = 1.0, [parent.go ])], if(parent.stopped = 0.0,parent.stop))),
			
				if((not player_is_standing_on_us), if(not_in_zipline_topOut, if(parent.stopped = 1.0, parent.go), if(parent.stopped = 0.0, parent.stop)) )])",
		},
		on_create: "[	
					set(alpha,0),
					set(x,parent.knot.x),
					set(y,parent.knot.y),
					set(vars.bwmag,8.0),
					
					[add_object(obj),
					set(vars.vert_rope, obj)
					] where obj = object('rope_angled_controller'),
					
					[add_object(obj),
					set(vars.basket, obj)
					] where obj = object('platform_swaying.shakebasket',x,y,facing,{'source'->me})
					
			]",
		on_process: "[setPos(),setInertia(),decayBasketWobble(),testZipline()]",
		animation: {
			id: "normal",
			image: "effects/particles.png",
			x: 210,
			y: 166,
			w: 28,
			h: 28,
			frames: 1,
			duration: 1000,
		},
	},
	{
		id: "basket",
		platform_area: [16,56,47,57],
		on_jumped_on: "if(level.player.standing_on = me, add(source.vars.bwmag, 10))",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "props/rope-platform.png",
			rect: [0,0,63,63],
			frames: 1,
			duration: 1000,
			palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
		},
	},
	{
		id: "shakebasket",
		zorder: "@include data/zorder.cfg:exterior_decor",
		platform_area: [22,86,52,87],
		on_jumped_on: "if(level.player.standing_on = me, [add(source.vars.bwmag, 10),fire_event(source.parent,'tripped')])",
		next_animation: "'normal'",
		
		properties: {
			pwidth: 40,
		
			#Properties for the positions of the platform.
			platform_y_pos: "midpoint_y + 72",
			platform_x1_pos: "midpoint_x - pwidth",
			platform_x2_pos: "midpoint_x + pwidth",
			material_sound: "'wood'",

			#The platform area when the platform is at rest.
			base_rect: "[x1pos, ypos,
			             x2pos, ypos,
			             x2pos, ypos,
			             x1pos, ypos]
						   where x1pos = platform_x1_pos,
						         x2pos = platform_x2_pos,
								 ypos = platform_y_pos",

			#Rotation of the platform to account for the platform rotating.
			rotated_rect: "rotate_rect(midpoint_x, midpoint_y,
			                           rotate, base_rect)",
		
		},
		on_process: "[
					set(platform_area, [(rotated_rect[0] - x)/2, (rotated_rect[1] - y)/2,
			                    (rotated_rect[2] - x)/2]),
					set(platform_offsets, [0, (rotated_rect[3] - rotated_rect[1])]),
				]",
		
		animation: [
			{
				palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
				no_remove_alpha_borders: true,
				id: "normal",
				image: "wip/basket-mockup2.png",
				rect: [75,0,146,99],
				frames: 11,
				reverse: true,
				duration: 4,
			},
			{
				palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
				no_remove_alpha_borders: true,
				id: "normal",
				image: "wip/basket-mockup2.png",
				rect: [219,0,290,99],
				frames: 7,
				reverse: true,
				duration: 4,
			},
		],
	},
],
}
