{
id: "sound_source",
always_active: true,

properties: {
	_sound_distance: "def(source, reciever) //Takes two lists. Must return a decimal value.
		decimal(
			max(
				map(
					zip(source.midpoint_xy, reciever.midpoint_xy, a-b),
					abs(value))
				)
			)",
	
	// we have a variety of different functions to make the sounds trail off over a distance;
	// some sounds need to shut up quickly when you pass by, others should carry a long way.
	_falloff_distance: "if(preset_falloff_dist, preset_falloff_dist, self.vars.falloff_distance) where preset_falloff_dist =  consts._sound_defaults[vars.sound_file] and consts._sound_defaults[vars.sound_file]['falloff_distance']",

	_attenuate_linearly: "def(distance) ((max_dist - distance) / max_dist where max_dist = _falloff_distance) ",

	_attenuate_inverse: "def(distance) (_falloff_distance/ max(1.0,distance/1.1) )",  //falloff dist here is the point at which it dips below 1, since the point it actually reaches zero is infinitely far away

	
	_distance_attenuation_function: "def(function_type, distance) if(not function_type = null, function_type(distance), if(preset_function, preset_function(distance), _attenuate_linearly(distance))) where preset_function = consts._sound_defaults[vars.sound_file] and self['_attenuate_' + consts._sound_defaults[vars.sound_file]['distance_attenuation_function']]",
	
	//this is the core function that decides how loud we are.
	sound_volume_multiplier: "def(source, reciever) 
		max(self._sound_volume_scale.min, 
			min(1.0,_distance_attenuation_function( vars.attenuation_function , _sound_distance(source, reciever) ))
				- (1-self._sound_volume_scale.max))
		* self.vars._sound_current_volume",
	
	
	
	
	sound_enable: "[set(self.vars.sound_enabled, true), fire_event('create')]",
	sound_disable: "[set(self.vars.sound_enabled, false), fire_event('die')]",
	
	sound_fade_in: "self._sound_fade(true)",
	sound_fade_out: "self._sound_fade(false)",
	_sound_fade: "def(mode) 
		map(
			if(mode, range(sfd), reverse(range(sfd))),
			schedule(value, set(self.vars._sound_current_volume, (value+1)/sfd))
			) where sfd = decimal(self.vars.sound_fade_duration)",
			
	_sound_controller_existing: "
		find(level.chars, 
			value.type='sound_source_coordinator' and
			value.vars.sound_file=self.vars.sound_file)",
			
	_sound_new_control: "[
		set(ctrl.vars.monitoring, [self]),
		set(ctrl.vars.sound_file, self.vars.sound_file),
		set(self.vars._sound_controller, ctrl),
		add_object(ctrl),
		] where ctrl = object('sound_source_coordinator')",
		
	_sound_volume_scale: "
		if(preset_volume, {
			min: vars.sound_volume_min, 
			max: preset_volume*vars.sound_volume_max,
		},{
			min: vars.sound_volume_min,
			max: vars.sound_volume_max,
		}) where preset_volume = consts._sound_defaults[vars.sound_file] and consts._sound_defaults[vars.sound_file]['sound_volume_max']",
		
	_sound_defaults: "null",
},

vars: {
	attenuation_function: null,
	sound_enabled: true,				//Prefer using the accessor properties, sound_enable/sound_disable, unless you haven't added the object yet.
	sound_file: false, 					//Set to something like 'sound.wav'.
	sound_volume_min: 0.0,				//Endpoints for volume scale are defined by 'min' and 'max'.
	sound_volume_max: 1.0,
	sound_fade_duration: 15, 			//Fade in/out frame duration.
	falloff_distance: 2500,				//Distance for maximum softness, if maximum loudness is 1.
							  			//For example, the default volume range is from 0 to .75, which would cause the sound to start playing at a distance of 7.5. If the maximum volume loudness was 1, we'd play at 10.
	_sound_current_volume: 0,			//Internal counter, for use with fading in/out. Ranges between 1 and 0.
	_sound_controller: null,			//The sound controller will set this when we are registered with it.
},

consts: {
	sound_volumes: "@include data/sound_volumes.cfg",
},

	
on_create: "[if(sound_file and sound_enabled,
	if(ctrl, ctrl.add(self), _sound_new_control)
		where ctrl = _sound_controller_existing
	),
	sound_fade_in,
	]",
	
on_die: "if(_sound_controller, _sound_controller.remove(self))",  

}