{
id: "sound_source",
always_active: true,
is_strict: true,

types: {
	AttenuationFunc: "function( decimal ) -> decimal",
	valid_sound_files: "enum {
			squeakygearsturning, boiling_pot, oceansurf, fan, ocean, oceansurfunderwater, alarm_loop, fireplace_gas, metal_squeak, circular_saw, rain_meditative, acid, fireplace, river_heavy, bog, fountain_large, torch, breeze_crickets, fountain_medium, waterfall_heavy, brook_cave, fountain_small, wind_blustery, brook_heavy, fridge, wind_leaves, brook_light, house_creaking, house_interior_seaside, cave, mech, machine_air_conditioner, energy_hum, space_glow, extended_laser, gazer_mini_aggro_loop, gazer_spin_loop
		}",
},

properties: {
	
	sound_distance: "def(obj sound_source source, obj player_controlled receiver, {x: decimal, y: decimal} addend) -> decimal
		decimal(
			max(
				map(
					zip(source.midpoint_xy, zip(receiver.midpoint_xy, _addend, a+b), a-b),
					abs(value))
				)
			) where _addend = [addend.x, addend.y]",
	
	// we have a variety of different functions to make the sounds trail off over a distance;
	// some sounds need to shut up quickly when you pass by, others should carry a long way.
	_falloff_distance: "decimal :: if(falloff_distance != -1, falloff_distance, preset_falloff_dist) 
		where preset_falloff_dist =  (decimal <- _sound_defaults[sound_file].falloff_distance) 
		asserting 
			(not level.in_editor) //speed optimization, actually doing the lookup actually hurts performance by about 30% atm.
			",

	_attenuate_linearly: "def(decimal distance) -> decimal ((max_dist - distance) / max_dist where max_dist = _falloff_distance) ",

	_attenuate_inverse: "def(decimal distance) -> decimal (_falloff_distance/ max(1.0,distance/1.1) )",  //falloff dist here is the point at which it dips below 1, since the point it actually reaches zero is infinitely far away

	attenuate_via: "def(enum {linearly, inverse} atten_type) -> AttenuationFunc if(atten_type = enum linearly, _attenuate_linearly, _attenuate_inverse)",

	distance_attenuation_function: "def(decimal distance) -> decimal if(preset_function is AttenuationFunc, preset_function(distance), _attenuate_linearly(distance)) where preset_function = _sound_defaults[sound_file] and me.attenuate_via(_sound_defaults[sound_file].distance_attenuation_function)",
	
	//this is the core function that decides how loud we are.
	sound_volume_multiplier: "def(obj sound_source source, obj player_controlled receiver) -> decimal
		max(_sound_volume_scale_cache.min, 
			min(1.0,distance_attenuation_function(sound_distance(source, receiver, {x:0, y:0}) ))
				- (1 - _sound_volume_scale_cache.max))
		* _sound_current_volume * manually_adjusted_sound_volume",
	
	_sound_volume_scale_cache: {
		type: "{min: decimal, max: decimal}",
		init: "{min: 0, max: 0}",
	},
	
	
	sound_enable: "[set(sound_enabled, true), fire_event('create')]",
	sound_disable: "[set(sound_enabled, false), fire_event('die')]",
	
	sound_fade_in: "_sound_fade(true)",
	sound_fade_out: "_sound_fade(false)",
	_sound_fade: "def(mode) -> commands
		map(
			if(mode, range(sfd), reverse(range(sfd))),
			schedule(value, set(_sound_current_volume, (value+1)/sfd))
			) where sfd = decimal(sound_fade_duration)",
			
	_sound_coordinator_existing: "find(filter(level.chars, value is obj sound_source_coordinator), value.sound_file = sound_file)",
			
	_sound_new_coordinator: "[
		set(_sound_coordinator, the_coordinator),
		add_object(the_coordinator),
		] where the_coordinator = object('sound_source_coordinator', 10, 10, {monitoring: [me], sound_file: sound_file, file_name: _sound_defaults[sound_file].file_name})",
		
	_sound_volume_scale: "{min: decimal, max: decimal} ::
		if(preset_volume, {
			min: sound_volume_min, 
			max: preset_volume * sound_volume_max,
		},{
			min: sound_volume_min,
			max: sound_volume_max,
		}) where preset_volume = if(_sound_defaults[sound_file], _sound_defaults[sound_file].sound_volume_max)",
		
	_sound_defaults: {
		type: "{
			enum {
				squeakygearsturning, boiling_pot, oceansurf, fan, ocean, oceansurfunderwater, alarm_loop, fireplace_gas, metal_squeak, circular_saw, rain_meditative, acid, fireplace, river_heavy, bog, fountain_large, torch, breeze_crickets, fountain_medium, waterfall_heavy, brook_cave, fountain_small, wind_blustery, brook_heavy, fridge, wind_leaves, brook_light, house_creaking, house_interior_seaside, cave, mech, machine_air_conditioner, energy_hum, space_glow, extended_laser, gazer_mini_aggro_loop, gazer_spin_loop
			} -> {
				file_name: string,
				sound_volume_max: decimal,
				distance_attenuation_function: enum {linearly, inverse},
				falloff_distance: decimal
			}
		}",
		default:{
		"@eval enum squeakygearsturning": {
			file_name: 'ambient/squeakygearsturning.ogg',
			sound_volume_max: 0.7,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 400,
		},
		"@eval enum boiling_pot": {
			file_name: 'ambient/boiling-pot.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 400,
		},
		"@eval enum oceansurf": {
			file_name: 'ambient/oceansurf.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum fan": {
			file_name: 'ambient/fan.ogg',
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 1500,
		},
		"@eval enum ocean": {
			file_name: 'ambient/ocean.ogg',
			sound_volume_max: 0.6,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 1000,
		},
		"@eval enum oceansurfunderwater": {
			file_name: 'ambient/oceansurfunderwater.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum alarm_loop": {
			file_name: 'alarm-loop.ogg',
			sound_volume_max: 1.00,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum fireplace_gas": {
			file_name: 'ambient/fireplace-gas.ogg',
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum metal_squeak": {
			file_name: 'ambient/metal-squeak.ogg',
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 150,
		},
		"@eval enum circular_saw": {
			file_name: 'ambient/circular-saw.wav',
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum rain_meditative": {
			file_name: 'ambient/rain-meditative.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum acid": {
			file_name: 'ambient/acid.ogg',
			sound_volume_max: 0.65,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum fireplace": {
			file_name: 'ambient/fireplace.ogg',
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 1000,
		},
		"@eval enum river_heavy": {
			file_name: 'ambient/river-heavy.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum bog": {
			file_name: 'ambient/bog.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum fountain_large": {
			file_name: 'ambient/fountain-large.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum torch": {
			file_name: 'ambient/torch.ogg',
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum breeze_crickets": {
			file_name: 'ambient/breeze-crickets.ogg',
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum fountain_medium": {
			file_name: 'ambient/fountain-medium.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum waterfall_heavy": {
			file_name: 'ambient/waterfall-heavy.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum brook_cave": {
			file_name: 'ambient/brook-cave.ogg',
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum fountain_small": {
			file_name: 'ambient/fountain-small.ogg',
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum wind_blustery": {
			file_name: 'ambient/wind-blustery.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum brook_heavy": {
			file_name: 'ambient/brook-heavy.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum fridge": {
			file_name: 'ambient/fridge.ogg',
			sound_volume_max: 0.4,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum wind_leaves": {
			file_name: 'ambient/wind-leaves.ogg',
			sound_volume_max: 0.9,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum brook_light": {
			file_name: 'ambient/brook-light.ogg',
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum house_creaking": {
			file_name: 'ambient/house-creaking.ogg',
			sound_volume_max: 0.30,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum house_interior_seaside": {
			file_name: 'ambient/house-interior-seaside.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum cave": {
			file_name: 'ambient/cave.ogg',
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum mech": {
			file_name: 'ambient/mech.ogg',
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum machine_air_conditioner": {
			file_name: 'ambient/machine-air-conditioner.ogg',
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum energy_hum": {
			file_name: 'ambient/energy-hum.wav',
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum space_glow": {
			file_name: 'ambient/space-glow.wav',
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum extended_laser": {
			file_name: 'extended-laser.wav',
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		"@eval enum gazer_mini_aggro_loop": {
			file_name: 'gazer-mini-aggro-loop.wav',
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		"@eval enum gazer_spin_loop": {
			file_name: 'gazer-spin-loop.wav',
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 150,
		},
	}, set: "null /*cannot set this, is immutable!*/" },
	
	sound_fade_duration: "15", 			//Fade in/out frame duration.
#-------------------------- temp vars --------------------------#
	_sound_coordinator: { type: "obj sound_source_coordinator|null", dynamic_initialization: false, persistent: false },
	_sound_current_volume: { type: "decimal", default: 0, persistent: false },			//Internal counter, for use with fading in/out. Ranges between 1 and 0.
	sound_enabled: { type: "bool", default: true, persistent: false },				//Prefer using the accessor properties, sound_enable/sound_disable, unless you haven't added the object yet.

#-------------------------- vars --------------------------#
	manually_adjusted_sound_volume: { type: "decimal", default: 1.0 },	//in rare cases, we want to manually manipulate a sound's volume (for example; turning it up-and-down as the source of the sound modulates in strength).  Rather than being a global setting for all copies of a sound, this is meant for individual source instances.
	
	
	sound_file: { type: "enum {
			squeakygearsturning, boiling_pot, oceansurf, fan, ocean, oceansurfunderwater, alarm_loop, fireplace_gas, metal_squeak, circular_saw, rain_meditative, acid, fireplace, river_heavy, bog, fountain_large, torch, breeze_crickets, fountain_medium, waterfall_heavy, brook_cave, fountain_small, wind_blustery, brook_heavy, fridge, wind_leaves, brook_light, house_creaking, house_interior_seaside, cave, mech, machine_air_conditioner, energy_hum, space_glow, extended_laser, gazer_mini_aggro_loop, gazer_spin_loop
		}", default: "@eval enum fan" },
	//sound_file: { type: "string", default: "", editor_info: { type: "enum", enum_values: "@eval map(get_files_in_dir('sounds/ambient'), 'ambient/'+value)" } },

	sound_volume_min: { type: "decimal", default: 0.0 },				//Endpoints for volume scale are defined by 'min' and 'max'.
	sound_volume_max: { type: "decimal", default: 1.0 },
	falloff_distance: { type: "decimal", default: -1 },				//Distance for maximum softness, if maximum loudness is 1.  For example, the default volume range is from 0 to .75, which would cause the sound to start playing at a distance of 7.5. If the maximum volume loudness was 1, we'd play at 10.
},

	
on_create: "[if(sound_enabled,
	if(coordinator, [coordinator.add(me),set(_sound_coordinator, coordinator)], _sound_new_coordinator)
		where coordinator = _sound_coordinator_existing
	),
	sound_fade_in,
	set(_sound_volume_scale_cache, _sound_volume_scale),
	]",
	
on_being_removed: "if(_sound_coordinator, _sound_coordinator.remove(me))",  

}
