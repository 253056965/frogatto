{
id: "item_acquirable",
is_strict: true,
prototype: ["standard_values"],
zorder: "@include data/zorder.cfg:player",
respawns: false,
collide_dimensions: ["~item"],

properties: {
	been_acquired: { type: "bool", default: false },

	attractable: "bool :: false",  //categorically speaking, can this get pulled in by the "magnetic" attractor powerup?
	
	_should_attract: "bool :: (attractable and _is_inside_attraction_range and level.player.has_item('acquirable_attractor') asserting level.player is obj frogatto_playable)",
	_has_started_attracting: "bool :: (not _started_attracting_at_cycle = null)",
	_started_attracting_at_cycle: { type: "int|null", default: null },
	_is_inside_attraction_range: "bool :: (lib.math.length(me,level.player) < 200)",
	_angle_to_player: "decimal :: lib.math.angle(me, level.player)",
	_attraction_speed: "decimal :: 50.0",
	
	
	process_attract: "commands :: if(_has_started_attracting and (not been_acquired),
			[	
				add(velocity_x, x_diff) where x_diff = int(_attraction_speed * cos(_angle_to_player) * 1.0),
				add(velocity_y, y_diff) where y_diff = int(_attraction_speed * sin(_angle_to_player) * 1.0),
				
				add(mid_x, x_diff) where x_diff = int(_attraction_speed/10 * cos(_angle_to_player) * 1.0),
				add(mid_y, y_diff) where y_diff = int(_attraction_speed/10 * sin(_angle_to_player) * 1.0),
				
				if(level.cycle - _started_attracting_at_cycle > 200 asserting _started_attracting_at_cycle is int, fire_event('acquired')),
			])",
},

on_process: "[if(_should_attract, set(_started_attracting_at_cycle,level.cycle)), process_attract]",

editor_info: {
	category: "props",
},

on_end_normal_anim: "animation('normal')",

//on_collide_object_item: "if(arg.collide_with['is_player_body_part'] and (not been_acquired),[set(been_acquired, true),fire_event('acquired')]) asserting arg.collide_with is custom_obj",

on_collide_object_item: "if(arg.collide_with is obj hittable,[if(collide_with.is_player_body_part and (not been_acquired),[set(been_acquired, true),fire_event('acquired')])] where collide_with = obj hittable <- arg.collide_with)",


// expected behaviors:
// on_acquired: "/* virtual; each object will need almost completely custom behavior for what it actually *does* when it's acquired, however we may want to unify the visual-effects stuff here. */",
// animation should have "item" area

}
