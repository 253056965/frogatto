{
id: "seeker_flying",
prototype: ["ant_flying"],
/*
	This prototype is intended to support specialized fliers who need to be able to pick a target, and fly towards it.  This target can be either an object, or a specific location.
	
	It also supports following a *path* of multiple targets.
*/

properties: {


#-------------------------- bounds/turning logic --------------------------#
	turns_away_from_solid_obstructions: "bool :: false", //generally these objects want to be fully pass-through, and not able to hit terrain.
	
	cycles_we_have_been_waiting_to_turn: { type: "int", default: 0 },
	clear_turning_delay: "set(cycles_we_have_been_waiting_to_turn, 0)",


#-------------------------- vars --------------------------#
	_targets: { type: "[{x:int, y:int}]", default: []},  
	_current_target: { type: "{x:int, y:int}|null", default: null },	//NB: if we've got a list of nodes we're traversing, this is the current one
	_target_obj: { type: "custom_obj|null", default: null },


#-------------------------- behavior --------------------------#
	flight_animations: "[string] :: ['fly', 'turn_fly','takeoff']", //a list of flying animations - inheritors may supply more than this

#-------------------------- target-seeking --------------------------#
	_target_pos: "{x:int, y:int}|null :: if(_target_obj, {x:_target_obj.mid_x, y:_target_obj.mid_y}, if(_current_target, _current_target, null))",
	target_acquisition_bounds: "decimal :: if(is_at_last_node, 50, 200)",

	is_at_target: "bool :: (_target_pos != null and dist_to_target < target_acquisition_bounds) and (speed < if(is_at_last_node, 10, 150) )",

	_target_callback: { type: "commands", default: null },		//The commands to run, when we reach the target. (Will be fired in addition to reach_target.)
	
	fly_to: "def([{x:int, y:int}] targets, commands callback=null) -> commands execute(me, [
		set(_targets, targets),
		set(_current_target, targets[0]),
		set(_target_callback, callback),
		]) asserting size(targets) > 0",

	dist_to_target: "decimal :: if(_target_pos != null, lib.math.length( [_target_pos.x,_target_pos.y], me), 0)",

	flight_speed: "decimal :: 6 * max( dist_to_target/500, 3.0 )",  // loosen up on the "gas pedal" upon approach to a target

		// this on the other hand, is a hard-and-severe "brake pedal" that forcibly lowers our velocity rather than just 'adding less':
	decelerate_near_target: "commands :: [set(velocity_x, velocity_x * fraction), set(velocity_y, velocity_y * fraction)]
		where fraction = 1.0 - braking_coefficient * (maxDist - min(maxDist,dist_to_target))/maxDist
		where maxDist = 100.0
		where braking_coefficient = 0.25 //if we actually directly reduce by the proportion, we slow way too soon
	",

	flight_vel: "{x:decimal, y:decimal} :: if(_target_pos != null,
					{
						x: cos(angle) * flight_speed,
						y: sin(angle) * flight_speed
					} where angle = lib.math.angle(me,[_target_pos.x, _target_pos.y]),
					{x:0,y:0})",
	
	should_turn_during_flight: "bool :: ((_target_pos = null) or (sign(mid_x - _target_pos.x) = facing)) and
										animation not in ['turn','turn_fly'] and
										(level.cycle - _last_turned > 10)",

	check_if_we_should_turn_and_do_so_if_appropriate: "commands :: if(should_turn_during_flight, turn_around, clear_turning_delay)",  

	process_fly: "if(_target_pos != null, if(not is_at_target, 
						[
							add(velocity_x, flight_vel.x), add(velocity_y, flight_vel.y),
							check_if_we_should_turn_and_do_so_if_appropriate,
							; decelerate_near_target
						],
						[check_for_target_obj_or_next_node]
					))",
					
	
	is_at_last_node: "size(_tail) = 0 where _tail = lib.standardize.tail(_targets)",
	
	/*
		We're assuming here that although we can follow a series of points (and stop on the last one), this is set up to only follow a single target object.  If we're following points, these two functions will shrink the target list by one and iterate the current target to the new point.  If we've reached the end (either the last member in the list or the object (usually the player) we're homing in on, we'll fire 'reach_target' to do whatever it is we do when we get there.
	*/
	check_for_target_obj_or_next_node: "if(_target_obj = null, 
											if(_current_target != null, check_next_node, fire_event(me, 'reach_target')),
											fire_event(me, 'reach_target')
	)",
					
	check_next_node: "if( size( _tail) > 0,
							[set(_current_target, __tail[0] ), set(_targets, __tail )] where __tail = ([{x:int, y:int}] <-_tail),
							fire_event(me, 'reach_target')
	) where _tail = lib.standardize.tail(_targets)",

#-------------------------- ant_flying overrides --------------------------#
	
#-------------------------- unique monster hooks --------------------------#
	do_special_per_object_process_fly: "commands :: null",

	/*
		Has no effect on re-initializing variables - we still want to try to find some arbitrary flying height if we don't have one.  However, when we get done seeking a target, if this is true, we'll want to directly just take the current position as our final flying position.
	*/
	desired_height_is_final_target_pos: "bool :: true",
	maybe_set_desired_height: "commands :: if(desired_height_is_final_target_pos, set(_desired_height, mid_y))",



},

on_create: "[animation(default_anim), set(activation_border, abs(_x_bound - _x2_bound)), reinitialize_vars]",


#-------------------------- animation switching --------------------------#
on_end_anim: "animation('fly')",


on_process: "[
				if(animation in flight_animations, 
					[process_fly, do_special_per_object_process_fly, maybe_set_desired_height]
				)
			]",
on_process_fly: "if(_target_pos = null, proto_event('ant_flying', 'process_fly'))", 

on_reach_target: "[set(_current_target,null), set(_target_obj, null), _target_callback]",

}
