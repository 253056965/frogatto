{
id: "breakable_obstruction",
prototype: ["hittable"],
hitpoints: 100,

springiness: 0,
friction: 1000,
traction: 1000,
traction_in_air: 1000,
has_feet: false,

editor_info: {
	category: "obstacles",
},

zorder: "@include data/zorder.cfg:exterior_decor",


properties: {

#-------------------------- special damage handlers --------------------------#
	special_vulnerability: "string|null :: null",
	handle_custom_damage_type_modifications: "def(string damage_type, int amount) -> int|null
						if(special_vulnerability != null,
							if(damage_type = special_vulnerability, kill_anything, 0),
							null
						)",

#-------------------------- hittable behavior lockdowns --------------------------#
	hurt_velocity_x: 0,
	hurt_velocity_y: 0,
	handle_knockback: "def(obj hittable collide_with) -> commands null",
	taxonomy: "'neutral'",


#-------------------------- hittable flags --------------------------#
	team: "'neutral'",
	acquirable_item_drop_value: 10,					
	points_value: 10,
	basic_type: "me.type",
	frogourmet_tag: "me.basic_type",
	
	
#-------------------------- cosmetic stuff --------------------------#
	should_flicker: "bool :: false",
	_rand: { type: "int", init: "1d360", persistent: false },
	do_ethereal_flicker: "commands :: set(alpha, lib.math.round(215 +5*sin(time*15) +5*sin(time*19) +15*sin(time*2)+15*sin(time*2.5)))
							where time = level.cycle + _rand",


#-------------------------- some soft defaults --------------------------#
	material_sound: "'stone'",
	death_fx_type: "'stone_large'",
	physical_size: "int :: 48",

	has_top: "bool :: true",
	
},

on_create: "if(has_top, spawn(me.type + '.top', mid_x, mid_y, {}))",


on_process: "[
				if(should_flicker, do_ethereal_flicker)
			]",


}
