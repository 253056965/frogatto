{
id: "effects_attache",
is_strict: true,
activation_border: 500,



properties: {
#-------------------------- vars --------------------------#
	time_to_die: { type: "int", dynamic_initialization: true },
	scheduled_death_at: { type: "int|null", default: null },
	
#-------------------------- connections --------------------------#
	_forced_parent_ref: { type: "obj hittable | null", default: null },
	_parent_obj: "(obj hittable <- if(spawned_by, spawned_by, _forced_parent_ref)) asserting not (spawned_by = null and _forced_parent_ref = null) | 'An object of type:' + me.type + ' and _addr:' + addr(me) + ' ended up without a parent object.  The design of this prototype demands that these objects always have a parent, period.  They need one upon creation, and if a parent dies, it must immediately remove all child objects of this type.'",
	
	attach_to_spawner: "commands :: if(not me in _parent_obj._effects_attaches, add(_parent_obj._effects_attaches, [me]))",

#-------------------------- logic --------------------------#
	schedule_death_cleanup: "execute(me, [
							turn_off,
							set(me.scheduled_death_at, cycle+time_to_die),
							schedule(time_to_die, [
								die(),
							])
						]) asserting me is obj effects_attache",

	do_setup: "commands :: null",
	turn_on: "commands :: null",
	turn_off: "commands :: null",
	
	debug_check: "if(scheduled_death_at != null, null asserting not (scheduled_death_at = null and _parent_obj.hitpoints < 0) | q(An effects object of type:' + me.type + ' and _addr:' + addr(me) + ' has become orphaned; if its parent dies and it doesn't have a cleanup scheduled, something has gone quite wrong.  Parents are supposed to always force these to die))",
},

timer_frequency: 200,
on_timer: "debug_check",

on_spawned: "[attach_to_spawner, do_setup, bind_command(def() turn_on)]",
on_create: "[attach_to_spawner, do_setup]",


animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86, y: 73, w: 0, h: 0,
	duration: -1,
},

}
