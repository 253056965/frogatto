{
id: "hittable_attache",
is_strict: true,
collide_dimensions: ["player","~enemy","~hazard"],



properties: {
#-------------------------- connections --------------------------#
	_forced_parent_ref: { type: "obj hittable | null", default: null },
	_parent_obj: "(obj hittable <- if(spawned_by, spawned_by, _forced_parent_ref)) asserting not (spawned_by = null and _forced_parent_ref = null) | 'An object of type:' + me.type + ' and _addr:' + addr(me) + ' ended up without a parent object.  The design of this prototype demands that these objects always have a parent, period.  They need one upon creation, and if a parent dies, it must immediately remove all child objects of this type.'",
	
	attach_to_spawner: "commands :: if(not me in _parent_obj._attaches, add(_parent_obj._attaches, [me]))",
},



on_spawned: "attach_to_spawner",
on_create: "attach_to_spawner",

#-------------------------- collision event handling --------------------------#

	on_collide_object_body: "if(arg.collide_with != _parent_obj,
								[_parent_obj.handle_body_collision(arg.collide_with, arg.collide_with_area, arg.all_collisions, arg.collision_index)]
							)",



}
