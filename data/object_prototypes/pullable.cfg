{
id: "pullable", //ie, levers.
prototype: ["hittable"],

zorder: "@include data/zorder.cfg:exterior_decor",
			
editor_info: {
	category: "keys & triggers",
	help: "A lever that can be pushed one way or the other. Can be connected to gates and such.",
},

properties: {
	get_hit_by: "def(obj hittable obj) -> commands execute(me, if(time_in_animation > 20, do_toggle))",

	do_toggle: "if(_event = 0,	[level.player.store_event(event, 1), visually_turn_on, broadcast_trigger(1)],
								[level.player.store_event(event, 0), visually_turn_off, broadcast_trigger(0)])",
	visually_turn_on: "[sound('switch.wav'), set(animation, 'pushed')]",
	visually_turn_off: "[sound('switch.wav'), set(animation, 'normal')]", 

	broadcast_trigger: "def(int new_state) -> commands map(filter(responders, value.event = me.event), if(new_state = 1, value.trigger_on, value.trigger_off)) where responders = ([obj triggerable] <- filter(level.chars, value is obj triggerable))",
		
	event: { type: "string", default:"''", editor_info: { type: "string" } },
	_event: "level.player.get_stored_event(event) or 0",  //if it hasn't been defined yet, we want it to return 0 because some things explicitly check for zero, rather than falsey values
},

on_create: "set(animation, if(_event != 0, 'pushed', 'normal'))
	asserting event != '' | 'All toggleable trigger objects must have an event so they persist across levels.'",

on_collide_object_body: "if(arg.collide_with.team = 'player' and (arg.collide_with_area in ['grab', 'attack', 'thrown']), [
	swallow_event(), 
	get_hit_by(arg.collide_with),
]) asserting arg.collide_with is obj hittable",

}