{
id: "pullable", //ie, levers.
prototype: ["hittable"],

zorder: "@include data/zorder.cfg:exterior_decor",
			
editor_info: {
	category: "keys & triggers",
	help: "A lever that can be pushed one way or the other. Can be connected to gates and such.",
},

properties: {
	get_hit_by: "def(obj hittable obj) -> commands execute(me,
		if(time_in_animation > 20, [
			sound('switch.wav'), 
			set(animation, if(animation = 'normal', 'pushed', 'normal'))
		]))",
	
	linked_object: { type: "null|string", editor_info: { type: "label" } },
	linked_object_list: { type:"[string]", default:[] },
	pressed: { type: "bool", default: false, editor_info: { type: "boolean" } }
},

on_create: "set(animation, if(pressed, 'pushed', 'normal'))",

on_collide_object_body: "if(arg.collide_with.team = 'player' and (arg.collide_with_area in ['grab', 'attack', 'thrown']), [
	swallow_event(), 
	get_hit_by(arg.collide_with),
]) asserting arg.collide_with is obj hittable",

on_enter_pushed_anim: "[
	if(get_object(level, linked_object) and (not level.in_editor), 
		fire_event(get_object(level, linked_object), 'button_pressed')), 
	if(linked_object_list, 
		map(linked_object_list, 'obj', 
			fire_event(get_object(level, obj), 'button_pressed'))),
] asserting linked_object is string and linked_object != '' | 'on_enter_pushed_anim missing label value for linked_object.'",

on_leave_pushed_anim: "[
	if(get_object(level, linked_object) and (not level.in_editor), 
		fire_event(get_object(level, linked_object), 'button_released')), 
	if(linked_object_list, 
		map(linked_object_list, 'obj', 
			fire_event(get_object(level, obj), 'button_released'))),
] asserting linked_object is string and linked_object != '' | 'on_leave_pushed_anim missing label value for linked_object.'",

}