{
toPoints: "def([object|map|[decimal]] points) -> [[decimal]] map(points, toPoint(value))",
toPoint: "overload(
	def(object point)    -> [decimal] [decimal] <- [point.mid_x, point.mid_y],
	def(map point)       -> [decimal] [decimal] <- [lib.math.default(decimal|null <- point.mid_x, decimal|null <- point.x), lib.math.default(decimal|null <- point.mid_y, decimal|null <- point.y)],
	def([decimal] point) -> [decimal] point asserting size(point) = 2,
)",

//Returns the center-point of the level.
camera: "def(object level) -> [int] [
	cam[0]+cam[2]/2-in_editor*130,
	cam[1]+cam[3]/2+in_editor*20
] asserting size(cam) = 4
  where cam = [int]<- level.camera_position,
        in_editor = int <- level.in_editor",

decimal: "overload( //This, and int, was made to patch old math that assumed you could subtract 1.0 and true to get 0.0.
	def(int     v) -> decimal decimal(v),
	def(decimal v) -> decimal v,
	def(any     v) -> decimal if(v,1.0,0.0) asserting v!=null
)",

int: "overload(
	def(int     v) -> int v,
	def(decimal v) -> int int(v),
	def(any     v) -> int if(v,1,0) asserting v!=null
)",

}