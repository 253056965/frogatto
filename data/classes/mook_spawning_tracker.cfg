{

#-------------------------- spawning criterion --------------------------#
	max_objects: { type: "int", dynamic_initialization: true },
	spawnee_types: { type: "[string]", dynamic_initialization: true },

#-------------------------- culling criterion --------------------------#
	_x_bound: { type: "int|null", default: null },
	_x2_bound: { type: "int|null", default: null },
	_y_bound: { type: "int|null", default: null },
	_y2_bound: { type: "int|null", default: null },

	is_alive: "def(custom_obj _obj) -> bool (_obj.hitpoints > 0)",

	is_within_x_bounds: "def(custom_obj _obj) -> bool if(not (_x_bound = null or _x2_bound = null) , (_obj.mid_x > _x_bound and _obj.mid_x < _x2_bound), true)",
	is_within_y_bounds: "def(custom_obj _obj) -> bool if(not (_y_bound = null or _y2_bound = null) , (_obj.mid_y > _y_bound and _obj.mid_y < _y2_bound), true)",
	

#-------------------------- storage --------------------------#
	this_obj: { type: "custom_obj", dynamic_initialization: true },
	
#-------------------------- processing --------------------------#
	current_mooks: "[custom_obj] :: filter(current_level().chars, (value.type in spawnee_types) and is_within_x_bounds(value) and is_within_y_bounds(value) and is_alive(value))",

		//the client using this must actually do the work of attaching the mook to the level, since that's the behavior that differs between different kinds of objects
	should_create_a_new_mook: "(size(current_mooks) < max_objects)",
	
}
