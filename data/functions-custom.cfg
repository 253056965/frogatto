[
	#three functions to help with powerup testing
	{
		args: "level,n",
		name: "score",
		formula: "set(level.player.vars.score, level.player.vars.score + n)",
	},
	{
		args: "level,n",
		name: "gold",
		formula: "[
			if(level.player.driver.coins_total_obtained + n >= 10, achievement('pocket_money')),
			if(level.player.driver.coins_total_obtained + n >= 1000, achievement('numismatologist')),
			if(level.player.driver.coins + n >= 99999,
				[/*achievement('speed_trader'),*/
				set(level.player.driver.coins, 99999),
				set(level.player.vars.gold_counter, 99999-level.player.driver.coins)],
				[add(level.player.driver.coins, n),
				add(level.player.driver.coins_total_obtained, n),
				add(level.player.vars.gold_counter, n)]
			),
			set(level.player.vars.last_got_gold, level.player.cycle),
			fire_event(level.player,'display_gold')]",
	},

	{
		name: "register_kill",
		args: "obj",
		formula: "if(obj.level.player.vars.achievement_kill_chain, [
			[if(time() - kc[size(kc)-4][1] < 10, achievement('rampage')),
			if(kc[15][0].type = kc[14][0].type and
			kc[15][0].type = kc[13][0].type and
			kc[15][0].type = kc[12][0].type and
			kc[15][0].type = kc[11][0].type and
			kc[15][0].type = kc[10][0].type and
			kc[15][0].type = kc[9][0].type and
			kc[15][0].type = kc[8][0].type and
			kc[15][0].type = kc[7][0].type and
			kc[15][0].type = kc[6][0].type and
			kc[15][0].type = obj.type, achievement('grudge'))] where kc = obj.level.player.vars.achievement_kill_chain,
			set(obj.level.player.vars.achievement_kill_chain, slice(obj.level.player.vars.achievement_kill_chain, 1, 16) + [[obj, time()]])
			],
			debug('Warning: Could not register kill. (in functions-custom.cfg)'))",
	},
	{
		name: "elastic_collision",
		args: "a,b",

		#takes two objects as parameters, changes their velocities according to an elastic collision
		# note deep magic on if(a < b) - this compares the memory addresses, and is done to ensure collisions aren't calculated twice (once on each end of the collision).
		formula: "if(a.mass and b.mass, [
				set(a.velocity_x, (momentum_x/2)/a.mass),
				set(b.velocity_x, (momentum_x/2)/b.mass),
				] where momentum_x = a.velocity_x*a.mass + b.velocity_x*b.mass)",
	},
]
